
Project_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a48  08004a48  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a50  08004a50  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000005c  08004ab4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004ab4  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd18  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c88  00000000  00000000  0002cde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099d  00000000  00000000  0002f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016482  00000000  00000000  0003004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e212  00000000  00000000  000464cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d321  00000000  00000000  000546e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039c4  00000000  00000000  000e1a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e53c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049d0 	.word	0x080049d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080049d0 	.word	0x080049d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <HCSR04_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HCSR04_Read(TIM_HandleTypeDef *htim){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); //alimento il segnale verso il trigger del sensore
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d66:	480c      	ldr	r0, [pc, #48]	; (8000d98 <HCSR04_Read+0x40>)
 8000d68:	f000 ffaa 	bl	8001cc0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f000 fc5b 	bl	8001628 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <HCSR04_Read+0x40>)
 8000d7a:	f000 ffa1 	bl	8001cc0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HCSR04_Read+0x44>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HCSR04_Read+0x44>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f042 0202 	orr.w	r2, r2, #2
 8000d8c:	60da      	str	r2, [r3, #12]
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	20000078 	.word	0x20000078

08000da0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]



	prova++;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_UART_RxCpltCallback+0x2c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_UART_RxCpltCallback+0x2c>)
 8000db2:	701a      	strb	r2, [r3, #0]
	/*if(Distance < 20)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); */

	HAL_UART_Receive_IT(&huart1, (uint8_t*)msg2, sizeof(msg));
 8000db4:	2214      	movs	r2, #20
 8000db6:	4906      	ldr	r1, [pc, #24]	; (8000dd0 <HAL_UART_RxCpltCallback+0x30>)
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <HAL_UART_RxCpltCallback+0x34>)
 8000dba:	f002 fa45 	bl	8003248 <HAL_UART_Receive_IT>
	HCSR04_Read(&htim2);
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <HAL_UART_RxCpltCallback+0x38>)
 8000dc0:	f7ff ffca 	bl	8000d58 <HCSR04_Read>

}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000013a 	.word	0x2000013a
 8000dd0:	20000118 	.word	0x20000118
 8000dd4:	200000c0 	.word	0x200000c0
 8000dd8:	20000078 	.word	0x20000078

08000ddc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7f1b      	ldrb	r3, [r3, #28]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	f040 808c 	bne.w	8000f1a <HAL_TIM_IC_CaptureCallback+0x12a>
		if(!Is_First_Captured){
 8000e02:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	f083 0301 	eor.w	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d01a      	beq.n	8000e46 <HAL_TIM_IC_CaptureCallback+0x56>
			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4848      	ldr	r0, [pc, #288]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000e14:	f001 fed4 	bl	8002bc0 <HAL_TIM_ReadCapturedValue>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a47      	ldr	r2, [pc, #284]	; (8000f38 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000e1c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = true;
 8000e1e:	4b44      	ldr	r3, [pc, #272]	; (8000f30 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e24:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a1a      	ldr	r2, [r3, #32]
 8000e2a:	4b42      	ldr	r3, [pc, #264]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 020a 	bic.w	r2, r2, #10
 8000e32:	621a      	str	r2, [r3, #32]
 8000e34:	4b3f      	ldr	r3, [pc, #252]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6a1a      	ldr	r2, [r3, #32]
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0202 	orr.w	r2, r2, #2
 8000e42:	621a      	str	r2, [r3, #32]

		}
		//HAL_UART_Transmit_IT(&huart1, (uint8_t*)msg, strlen(msg));
	}
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}
 8000e44:	e069      	b.n	8000f1a <HAL_TIM_IC_CaptureCallback+0x12a>
		else if(Is_First_Captured){
 8000e46:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d065      	beq.n	8000f1a <HAL_TIM_IC_CaptureCallback+0x12a>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f001 feb5 	bl	8002bc0 <HAL_TIM_ReadCapturedValue>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a38      	ldr	r2, [pc, #224]	; (8000f3c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000e5a:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2200      	movs	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24
			if(IC_Val2 > IC_Val1){
 8000e64:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d907      	bls.n	8000e80 <HAL_TIM_IC_CaptureCallback+0x90>
				Difference = IC_Val2 - IC_Val1;
 8000e70:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e009      	b.n	8000e94 <HAL_TIM_IC_CaptureCallback+0xa4>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e80:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e8e:	33ff      	adds	r3, #255	; 0xff
 8000e90:	4a2b      	ldr	r2, [pc, #172]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000e92:	6013      	str	r3, [r2, #0]
			Distance = Difference*.034/2;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb33 	bl	8000504 <__aeabi_ui2d>
 8000e9e:	a322      	add	r3, pc, #136	; (adr r3, 8000f28 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff fba8 	bl	80005f8 <__aeabi_dmul>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb8:	f7ff fcc8 	bl	800084c <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fdaa 	bl	8000a1c <__aeabi_d2uiz>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000ece:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = false;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
			sprintf(msg, "Distance: %dcm\r\n", Distance); // preparo il messaggio da inviare
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	491a      	ldr	r1, [pc, #104]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000ede:	481b      	ldr	r0, [pc, #108]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000ee0:	f003 f8d2 	bl	8004088 <siprintf>
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6a1a      	ldr	r2, [r3, #32]
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 020a 	bic.w	r2, r2, #10
 8000ef2:	621a      	str	r2, [r3, #32]
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6a12      	ldr	r2, [r2, #32]
 8000efe:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0202 	bic.w	r2, r2, #2
 8000f0e:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)msg, sizeof(msg));
 8000f10:	2214      	movs	r2, #20
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000f14:	480e      	ldr	r0, [pc, #56]	; (8000f50 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000f16:	f002 f952 	bl	80031be <HAL_UART_Transmit_IT>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	f3af 8000 	nop.w
 8000f28:	b020c49c 	.word	0xb020c49c
 8000f2c:	3fa16872 	.word	0x3fa16872
 8000f30:	20000138 	.word	0x20000138
 8000f34:	20000078 	.word	0x20000078
 8000f38:	2000012c 	.word	0x2000012c
 8000f3c:	20000130 	.word	0x20000130
 8000f40:	20000134 	.word	0x20000134
 8000f44:	20000139 	.word	0x20000139
 8000f48:	080049e8 	.word	0x080049e8
 8000f4c:	20000104 	.word	0x20000104
 8000f50:	200000c0 	.word	0x200000c0

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f000 faf4 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f81a 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 f8fe 	bl	8001160 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 f8d2 	bl	800110c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f68:	f000 f87e 	bl	8001068 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, (uint8_t*)msg2, sizeof(msg2));
 8000f6c:	2214      	movs	r2, #20
 8000f6e:	4906      	ldr	r1, [pc, #24]	; (8000f88 <main+0x34>)
 8000f70:	4806      	ldr	r0, [pc, #24]	; (8000f8c <main+0x38>)
 8000f72:	f002 f969 	bl	8003248 <HAL_UART_Receive_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f76:	2100      	movs	r1, #0
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <main+0x3c>)
 8000f7a:	f001 fb63 	bl	8002644 <HAL_TIM_IC_Start_IT>

  HCSR04_Read(&htim2);
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <main+0x3c>)
 8000f80:	f7ff feea 	bl	8000d58 <HCSR04_Read>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <main+0x30>
 8000f86:	bf00      	nop
 8000f88:	20000118 	.word	0x20000118
 8000f8c:	200000c0 	.word	0x200000c0
 8000f90:	20000078 	.word	0x20000078

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2230      	movs	r2, #48	; 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 f890 	bl	80040c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <SystemClock_Config+0xcc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <SystemClock_Config+0xcc>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <SystemClock_Config+0xcc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <SystemClock_Config+0xd0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <SystemClock_Config+0xd0>)
 8000fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <SystemClock_Config+0xd0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001000:	2302      	movs	r3, #2
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001004:	2300      	movs	r3, #0
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001008:	2308      	movs	r3, #8
 800100a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800100c:	2354      	movs	r3, #84	; 0x54
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001014:	2304      	movs	r3, #4
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fe69 	bl	8001cf4 <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001028:	f000 f902 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2302      	movs	r3, #2
 8001032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2102      	movs	r1, #2
 8001048:	4618      	mov	r0, r3
 800104a:	f001 f8cb 	bl	80021e4 <HAL_RCC_ClockConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001054:	f000 f8ec 	bl	8001230 <Error_Handler>
  }
}
 8001058:	bf00      	nop
 800105a:	3750      	adds	r7, #80	; 0x50
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <MX_TIM2_Init+0xa0>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_TIM2_Init+0xa0>)
 800108e:	2200      	movs	r2, #0
 8001090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_TIM2_Init+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_TIM2_Init+0xa0>)
 800109a:	f04f 32ff 	mov.w	r2, #4294967295
 800109e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010ae:	f001 fa79 	bl	80025a4 <HAL_TIM_IC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b8:	f000 f8ba 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	480f      	ldr	r0, [pc, #60]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010cc:	f001 ffa8 	bl	8003020 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010d6:	f000 f8ab 	bl	8001230 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010de:	2301      	movs	r3, #1
 80010e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010f2:	f001 fcc9 	bl	8002a88 <HAL_TIM_IC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80010fc:	f000 f898 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000078 	.word	0x20000078

0800110c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_USART1_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001118:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800111c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001144:	f001 ffee 	bl	8003124 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f000 f86f 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000c0 	.word	0x200000c0
 800115c:	40011000 	.word	0x40011000

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_GPIO_Init+0xc4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a29      	ldr	r2, [pc, #164]	; (8001224 <MX_GPIO_Init+0xc4>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <MX_GPIO_Init+0xc4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_GPIO_Init+0xc4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a22      	ldr	r2, [pc, #136]	; (8001224 <MX_GPIO_Init+0xc4>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_GPIO_Init+0xc4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_GPIO_Init+0xc4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <MX_GPIO_Init+0xc4>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_GPIO_Init+0xc4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2120      	movs	r1, #32
 80011ce:	4816      	ldr	r0, [pc, #88]	; (8001228 <MX_GPIO_Init+0xc8>)
 80011d0:	f000 fd76 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011da:	4814      	ldr	r0, [pc, #80]	; (800122c <MX_GPIO_Init+0xcc>)
 80011dc:	f000 fd70 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011e0:	2320      	movs	r3, #32
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_GPIO_Init+0xc8>)
 80011f8:	f000 fbde 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_GPIO_Init+0xcc>)
 8001216:	f000 fbcf 	bl	80019b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	e7fe      	b.n	8001238 <Error_Handler+0x8>
	...

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <HAL_MspInit+0x58>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <HAL_MspInit+0x58>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_MspInit+0x58>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_MspInit+0x58>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <HAL_MspInit+0x58>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_MspInit+0x58>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2005      	movs	r0, #5
 8001280:	f000 fad1 	bl	8001826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001284:	2005      	movs	r0, #5
 8001286:	f000 faea 	bl	800185e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b8:	d133      	bne.n	8001322 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_TIM_IC_MspInit+0x94>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a1a      	ldr	r2, [pc, #104]	; (800132c <HAL_TIM_IC_MspInit+0x94>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_TIM_IC_MspInit+0x94>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_TIM_IC_MspInit+0x94>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_TIM_IC_MspInit+0x94>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_TIM_IC_MspInit+0x94>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001302:	2301      	movs	r3, #1
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <HAL_TIM_IC_MspInit+0x98>)
 800130e:	f000 fb53 	bl	80019b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	201c      	movs	r0, #28
 8001318:	f000 fa85 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800131c:	201c      	movs	r0, #28
 800131e:	f000 fa9e 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_UART_MspInit+0x94>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d134      	bne.n	80013c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_UART_MspInit+0x98>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_UART_MspInit+0x98>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800138e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a0:	2307      	movs	r3, #7
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <HAL_UART_MspInit+0x9c>)
 80013ac:	f000 fb04 	bl	80019b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2025      	movs	r0, #37	; 0x25
 80013b6:	f000 fa36 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ba:	2025      	movs	r0, #37	; 0x25
 80013bc:	f000 fa4f 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40011000 	.word	0x40011000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f8e2 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <TIM2_IRQHandler+0x10>)
 800143e:	f001 fa1b 	bl	8002878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000078 	.word	0x20000078

0800144c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <USART1_IRQHandler+0x10>)
 8001452:	f001 ff29 	bl	80032a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000c0 	.word	0x200000c0

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f002 fe22 	bl	80040d8 <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20018000 	.word	0x20018000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	2000013c 	.word	0x2000013c
 80014c8:	20000290 	.word	0x20000290

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800150c:	4c0b      	ldr	r4, [pc, #44]	; (800153c <LoopFillZerobss+0x26>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151a:	f7ff ffd7 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f002 fde1 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fd17 	bl	8000f54 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001534:	08004a58 	.word	0x08004a58
  ldr r2, =_sbss
 8001538:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800153c:	2000028c 	.word	0x2000028c

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f94f 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fe60 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f967 	bl	800187a <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f92f 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008
 800160c:	20000140 	.word	0x20000140

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000140 	.word	0x20000140

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff29 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff3e 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff8e 	bl	8001764 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff31 	bl	80016d4 <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff feb6 	bl	8001610 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d008      	beq.n	80018c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e052      	b.n	800196a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0216 	bic.w	r2, r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <HAL_DMA_Abort+0x62>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0208 	bic.w	r2, r2, #8
 8001902:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001914:	e013      	b.n	800193e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001916:	f7ff fe7b 	bl	8001610 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b05      	cmp	r3, #5
 8001922:	d90c      	bls.n	800193e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2220      	movs	r2, #32
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2203      	movs	r2, #3
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e015      	b.n	800196a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1e4      	bne.n	8001916 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	223f      	movs	r2, #63	; 0x3f
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d004      	beq.n	8001990 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e00c      	b.n	80019aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2205      	movs	r2, #5
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e159      	b.n	8001c88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8148 	bne.w	8001c82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80a2 	beq.w	8001c82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a56      	ldr	r2, [pc, #344]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5a:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a49      	ldr	r2, [pc, #292]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0x202>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_GPIO_Init+0x2f4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x1fe>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x2f8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x1fa>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <HAL_GPIO_Init+0x2fc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x1f6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x1f2>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e008      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e004      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f002 0203 	and.w	r2, r2, #3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bcc:	4935      	ldr	r1, [pc, #212]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfe:	4a2f      	ldr	r2, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c28:	4a24      	ldr	r2, [pc, #144]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c52:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	f67f aea2 	bls.w	80019d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e267      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d075      	beq.n	8001dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d12:	4b88      	ldr	r3, [pc, #544]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d00c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1e:	4b85      	ldr	r3, [pc, #532]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d112      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b82      	ldr	r3, [pc, #520]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d36:	d10b      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	4b7e      	ldr	r3, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d05b      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d157      	bne.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e242      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d106      	bne.n	8001d68 <HAL_RCC_OscConfig+0x74>
 8001d5a:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a75      	ldr	r2, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e01d      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4b70      	ldr	r3, [pc, #448]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6f      	ldr	r2, [pc, #444]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6c      	ldr	r2, [pc, #432]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d8c:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a68      	ldr	r2, [pc, #416]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a65      	ldr	r2, [pc, #404]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff fc30 	bl	8001610 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff fc2c 	bl	8001610 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e207      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b5b      	ldr	r3, [pc, #364]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fc1c 	bl	8001610 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fc18 	bl	8001610 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1f3      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d063      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d11c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b44      	ldr	r3, [pc, #272]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e1c7      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4937      	ldr	r1, [pc, #220]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	e03a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_RCC_OscConfig+0x244>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fbd1 	bl	8001610 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff fbcd 	bl	8001610 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e1a8      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4925      	ldr	r1, [pc, #148]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_OscConfig+0x244>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff fbb0 	bl	8001610 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fbac 	bl	8001610 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e187      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d036      	beq.n	8001f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d016      	beq.n	8001f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_RCC_OscConfig+0x248>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff fb90 	bl	8001610 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fb8c 	bl	8001610 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e167      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x200>
 8001f12:	e01b      	b.n	8001f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x248>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fb79 	bl	8001610 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	e00e      	b.n	8001f40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f22:	f7ff fb75 	bl	8001610 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d907      	bls.n	8001f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e150      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
 8001f34:	40023800 	.word	0x40023800
 8001f38:	42470000 	.word	0x42470000
 8001f3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b88      	ldr	r3, [pc, #544]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ea      	bne.n	8001f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8097 	beq.w	8002088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a7c      	ldr	r2, [pc, #496]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b77      	ldr	r3, [pc, #476]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4b74      	ldr	r3, [pc, #464]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a73      	ldr	r2, [pc, #460]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fb35 	bl	8001610 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7ff fb31 	bl	8001610 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e10c      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x2ea>
 8001fd0:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a63      	ldr	r2, [pc, #396]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x324>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x30c>
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a5e      	ldr	r2, [pc, #376]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a5b      	ldr	r2, [pc, #364]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x324>
 8002000:	4b58      	ldr	r3, [pc, #352]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a57      	ldr	r2, [pc, #348]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	4b55      	ldr	r3, [pc, #340]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a54      	ldr	r2, [pc, #336]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff faf6 	bl	8001610 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7ff faf2 	bl	8001610 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0cb      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <HAL_RCC_OscConfig+0x334>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7ff fae0 	bl	8001610 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7ff fadc 	bl	8001610 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e0b5      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206a:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ee      	bne.n	8002054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207c:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a38      	ldr	r2, [pc, #224]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a1 	beq.w	80021d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002092:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b08      	cmp	r3, #8
 800209c:	d05c      	beq.n	8002158 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d141      	bne.n	800212a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RCC_OscConfig+0x478>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fab0 	bl	8001610 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff faac 	bl	8001610 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e087      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	085b      	lsrs	r3, r3, #1
 80020ea:	3b01      	subs	r3, #1
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	491b      	ldr	r1, [pc, #108]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x478>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7ff fa85 	bl	8001610 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210a:	f7ff fa81 	bl	8001610 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e05c      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x416>
 8002128:	e054      	b.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_RCC_OscConfig+0x478>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fa6e 	bl	8001610 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7ff fa6a 	bl	8001610 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e045      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x444>
 8002156:	e03d      	b.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e038      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
 8002164:	40023800 	.word	0x40023800
 8002168:	40007000 	.word	0x40007000
 800216c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_RCC_OscConfig+0x4ec>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d028      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d121      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d11a      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d111      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0cc      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b68      	ldr	r3, [pc, #416]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d90c      	bls.n	8002220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0b8      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002238:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800225a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	494d      	ldr	r1, [pc, #308]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d044      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d119      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e067      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4934      	ldr	r1, [pc, #208]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7ff f99c 	bl	8001610 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7ff f998 	bl	8001610 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e04f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d20c      	bcs.n	800232c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e032      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4916      	ldr	r1, [pc, #88]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	490e      	ldr	r1, [pc, #56]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236a:	f000 f821 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	490a      	ldr	r1, [pc, #40]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	5ccb      	ldrb	r3, [r1, r3]
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff f8fc 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00
 80023a0:	40023800 	.word	0x40023800
 80023a4:	080049fc 	.word	0x080049fc
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b4:	b090      	sub	sp, #64	; 0x40
 80023b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
 80023bc:	2300      	movs	r3, #0
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c0:	2300      	movs	r3, #0
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d00d      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x40>
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	f200 80a1 	bhi.w	800251c <HAL_RCC_GetSysClockFreq+0x16c>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x34>
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x3a>
 80023e2:	e09b      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_GetSysClockFreq+0x184>)
 80023e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023e8:	e09b      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ea:	4b53      	ldr	r3, [pc, #332]	; (8002538 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ee:	e098      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f0:	4b4f      	ldr	r3, [pc, #316]	; (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fa:	4b4d      	ldr	r3, [pc, #308]	; (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d028      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	2200      	movs	r2, #0
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	627a      	str	r2, [r7, #36]	; 0x24
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002418:	2100      	movs	r1, #0
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_GetSysClockFreq+0x188>)
 800241c:	fb03 f201 	mul.w	r2, r3, r1
 8002420:	2300      	movs	r3, #0
 8002422:	fb00 f303 	mul.w	r3, r0, r3
 8002426:	4413      	add	r3, r2
 8002428:	4a43      	ldr	r2, [pc, #268]	; (8002538 <HAL_RCC_GetSysClockFreq+0x188>)
 800242a:	fba0 1202 	umull	r1, r2, r0, r2
 800242e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002430:	460a      	mov	r2, r1
 8002432:	62ba      	str	r2, [r7, #40]	; 0x28
 8002434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002436:	4413      	add	r3, r2
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	2200      	movs	r2, #0
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	61fa      	str	r2, [r7, #28]
 8002442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002446:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800244a:	f7fe fb07 	bl	8000a5c <__aeabi_uldivmod>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4613      	mov	r3, r2
 8002454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002456:	e053      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	2200      	movs	r2, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	617a      	str	r2, [r7, #20]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800246a:	f04f 0b00 	mov.w	fp, #0
 800246e:	4652      	mov	r2, sl
 8002470:	465b      	mov	r3, fp
 8002472:	f04f 0000 	mov.w	r0, #0
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	0159      	lsls	r1, r3, #5
 800247c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002480:	0150      	lsls	r0, r2, #5
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	ebb2 080a 	subs.w	r8, r2, sl
 800248a:	eb63 090b 	sbc.w	r9, r3, fp
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800249a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800249e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024a2:	ebb2 0408 	subs.w	r4, r2, r8
 80024a6:	eb63 0509 	sbc.w	r5, r3, r9
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	00eb      	lsls	r3, r5, #3
 80024b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024b8:	00e2      	lsls	r2, r4, #3
 80024ba:	4614      	mov	r4, r2
 80024bc:	461d      	mov	r5, r3
 80024be:	eb14 030a 	adds.w	r3, r4, sl
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	eb45 030b 	adc.w	r3, r5, fp
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024d6:	4629      	mov	r1, r5
 80024d8:	028b      	lsls	r3, r1, #10
 80024da:	4621      	mov	r1, r4
 80024dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024e0:	4621      	mov	r1, r4
 80024e2:	028a      	lsls	r2, r1, #10
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ea:	2200      	movs	r2, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	60fa      	str	r2, [r7, #12]
 80024f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024f4:	f7fe fab2 	bl	8000a5c <__aeabi_uldivmod>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4613      	mov	r3, r2
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	3301      	adds	r3, #1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	fbb2 f3f3 	udiv	r3, r2, r3
 8002518:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800251a:	e002      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCC_GetSysClockFreq+0x184>)
 800251e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002524:	4618      	mov	r0, r3
 8002526:	3740      	adds	r7, #64	; 0x40
 8002528:	46bd      	mov	sp, r7
 800252a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	00f42400 	.word	0x00f42400
 8002538:	017d7840 	.word	0x017d7840

0800253c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_RCC_GetHCLKFreq+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000000 	.word	0x20000000

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002558:	f7ff fff0 	bl	800253c <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	0a9b      	lsrs	r3, r3, #10
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4903      	ldr	r1, [pc, #12]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	08004a0c 	.word	0x08004a0c

0800257c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002580:	f7ff ffdc 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0b5b      	lsrs	r3, r3, #13
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	08004a0c 	.word	0x08004a0c

080025a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e041      	b.n	800263a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fe64 	bl	8001298 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fb58 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d104      	bne.n	8002662 <HAL_TIM_IC_Start_IT+0x1e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e013      	b.n	800268a <HAL_TIM_IC_Start_IT+0x46>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d104      	bne.n	8002672 <HAL_TIM_IC_Start_IT+0x2e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800266e:	b2db      	uxtb	r3, r3
 8002670:	e00b      	b.n	800268a <HAL_TIM_IC_Start_IT+0x46>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d104      	bne.n	8002682 <HAL_TIM_IC_Start_IT+0x3e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e003      	b.n	800268a <HAL_TIM_IC_Start_IT+0x46>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002688:	b2db      	uxtb	r3, r3
 800268a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d104      	bne.n	800269c <HAL_TIM_IC_Start_IT+0x58>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e013      	b.n	80026c4 <HAL_TIM_IC_Start_IT+0x80>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d104      	bne.n	80026ac <HAL_TIM_IC_Start_IT+0x68>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e00b      	b.n	80026c4 <HAL_TIM_IC_Start_IT+0x80>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d104      	bne.n	80026bc <HAL_TIM_IC_Start_IT+0x78>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e003      	b.n	80026c4 <HAL_TIM_IC_Start_IT+0x80>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026c6:	7bbb      	ldrb	r3, [r7, #14]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d102      	bne.n	80026d2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026cc:	7b7b      	ldrb	r3, [r7, #13]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0c2      	b.n	800285c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_IC_Start_IT+0xa2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e4:	e013      	b.n	800270e <HAL_TIM_IC_Start_IT+0xca>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_IC_Start_IT+0xb2>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f4:	e00b      	b.n	800270e <HAL_TIM_IC_Start_IT+0xca>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_IC_Start_IT+0xc2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002704:	e003      	b.n	800270e <HAL_TIM_IC_Start_IT+0xca>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d104      	bne.n	800271e <HAL_TIM_IC_Start_IT+0xda>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800271c:	e013      	b.n	8002746 <HAL_TIM_IC_Start_IT+0x102>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d104      	bne.n	800272e <HAL_TIM_IC_Start_IT+0xea>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800272c:	e00b      	b.n	8002746 <HAL_TIM_IC_Start_IT+0x102>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d104      	bne.n	800273e <HAL_TIM_IC_Start_IT+0xfa>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800273c:	e003      	b.n	8002746 <HAL_TIM_IC_Start_IT+0x102>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d841      	bhi.n	80027d0 <HAL_TIM_IC_Start_IT+0x18c>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_TIM_IC_Start_IT+0x110>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002789 	.word	0x08002789
 8002758:	080027d1 	.word	0x080027d1
 800275c:	080027d1 	.word	0x080027d1
 8002760:	080027d1 	.word	0x080027d1
 8002764:	0800279b 	.word	0x0800279b
 8002768:	080027d1 	.word	0x080027d1
 800276c:	080027d1 	.word	0x080027d1
 8002770:	080027d1 	.word	0x080027d1
 8002774:	080027ad 	.word	0x080027ad
 8002778:	080027d1 	.word	0x080027d1
 800277c:	080027d1 	.word	0x080027d1
 8002780:	080027d1 	.word	0x080027d1
 8002784:	080027bf 	.word	0x080027bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0202 	orr.w	r2, r2, #2
 8002796:	60da      	str	r2, [r3, #12]
      break;
 8002798:	e01d      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0204 	orr.w	r2, r2, #4
 80027a8:	60da      	str	r2, [r3, #12]
      break;
 80027aa:	e014      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0208 	orr.w	r2, r2, #8
 80027ba:	60da      	str	r2, [r3, #12]
      break;
 80027bc:	e00b      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0210 	orr.w	r2, r2, #16
 80027cc:	60da      	str	r2, [r3, #12]
      break;
 80027ce:	e002      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d13e      	bne.n	800285a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	6839      	ldr	r1, [r7, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fbf5 	bl	8002fd4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_TIM_IC_Start_IT+0x220>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_TIM_IC_Start_IT+0x1e2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d013      	beq.n	8002826 <HAL_TIM_IC_Start_IT+0x1e2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a19      	ldr	r2, [pc, #100]	; (8002868 <HAL_TIM_IC_Start_IT+0x224>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_TIM_IC_Start_IT+0x1e2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_TIM_IC_Start_IT+0x228>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_TIM_IC_Start_IT+0x1e2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a16      	ldr	r2, [pc, #88]	; (8002870 <HAL_TIM_IC_Start_IT+0x22c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_TIM_IC_Start_IT+0x1e2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <HAL_TIM_IC_Start_IT+0x230>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d111      	bne.n	800284a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d010      	beq.n	800285a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002848:	e007      	b.n	800285a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40010000 	.word	0x40010000
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40014000 	.word	0x40014000

08002878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d122      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b02      	cmp	r3, #2
 800289a:	d11b      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0202 	mvn.w	r2, #2
 80028a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fa98 	bl	8000df0 <HAL_TIM_IC_CaptureCallback>
 80028c0:	e005      	b.n	80028ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f9ca 	bl	8002c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f9d1 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d122      	bne.n	8002928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d11b      	bne.n	8002928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0204 	mvn.w	r2, #4
 80028f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2202      	movs	r2, #2
 80028fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fa6e 	bl	8000df0 <HAL_TIM_IC_CaptureCallback>
 8002914:	e005      	b.n	8002922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f9a0 	bl	8002c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f9a7 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b08      	cmp	r3, #8
 8002934:	d122      	bne.n	800297c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b08      	cmp	r3, #8
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0208 	mvn.w	r2, #8
 800294c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2204      	movs	r2, #4
 8002952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fa44 	bl	8000df0 <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f976 	bl	8002c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f97d 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b10      	cmp	r3, #16
 8002988:	d122      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b10      	cmp	r3, #16
 8002996:	d11b      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0210 	mvn.w	r2, #16
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2208      	movs	r2, #8
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fa1a 	bl	8000df0 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f94c 	bl	8002c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f953 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d10e      	bne.n	80029fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0201 	mvn.w	r2, #1
 80029f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f926 	bl	8002c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	2b80      	cmp	r3, #128	; 0x80
 8002a08:	d10e      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b80      	cmp	r3, #128	; 0x80
 8002a16:	d107      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fb74 	bl	8003110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d10e      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d107      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f918 	bl	8002c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d10e      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d107      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0220 	mvn.w	r2, #32
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fb3e 	bl	80030fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e088      	b.n	8002bb8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f000 f968 	bl	8002d98 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 020c 	bic.w	r2, r2, #12
 8002ad6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6999      	ldr	r1, [r3, #24]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	619a      	str	r2, [r3, #24]
 8002aea:	e060      	b.n	8002bae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d11c      	bne.n	8002b2c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f000 f9b1 	bl	8002e68 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b14:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6999      	ldr	r1, [r3, #24]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	021a      	lsls	r2, r3, #8
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	619a      	str	r2, [r3, #24]
 8002b2a:	e040      	b.n	8002bae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11b      	bne.n	8002b6a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f000 f9ce 	bl	8002ee2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 020c 	bic.w	r2, r2, #12
 8002b54:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69d9      	ldr	r1, [r3, #28]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	61da      	str	r2, [r3, #28]
 8002b68:	e021      	b.n	8002bae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b0c      	cmp	r3, #12
 8002b6e:	d11c      	bne.n	8002baa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f000 f9eb 	bl	8002f5a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b92:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69d9      	ldr	r1, [r3, #28]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	021a      	lsls	r2, r3, #8
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	61da      	str	r2, [r3, #28]
 8002ba8:	e001      	b.n	8002bae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d831      	bhi.n	8002c38 <HAL_TIM_ReadCapturedValue+0x78>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <HAL_TIM_ReadCapturedValue+0x1c>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002c11 	.word	0x08002c11
 8002be0:	08002c39 	.word	0x08002c39
 8002be4:	08002c39 	.word	0x08002c39
 8002be8:	08002c39 	.word	0x08002c39
 8002bec:	08002c1b 	.word	0x08002c1b
 8002bf0:	08002c39 	.word	0x08002c39
 8002bf4:	08002c39 	.word	0x08002c39
 8002bf8:	08002c39 	.word	0x08002c39
 8002bfc:	08002c25 	.word	0x08002c25
 8002c00:	08002c39 	.word	0x08002c39
 8002c04:	08002c39 	.word	0x08002c39
 8002c08:	08002c39 	.word	0x08002c39
 8002c0c:	08002c2f 	.word	0x08002c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	60fb      	str	r3, [r7, #12]

      break;
 8002c18:	e00f      	b.n	8002c3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	60fb      	str	r3, [r7, #12]

      break;
 8002c22:	e00a      	b.n	8002c3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	60fb      	str	r3, [r7, #12]

      break;
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	60fb      	str	r3, [r7, #12]

      break;
 8002c36:	e000      	b.n	8002c3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002c38:	bf00      	nop
  }

  return tmpreg;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <TIM_Base_SetConfig+0xe4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00f      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d00b      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a31      	ldr	r2, [pc, #196]	; (8002d80 <TIM_Base_SetConfig+0xe8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <TIM_Base_SetConfig+0xec>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <TIM_Base_SetConfig+0xf0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <TIM_Base_SetConfig+0xe4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01b      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf0:	d017      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <TIM_Base_SetConfig+0xe8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <TIM_Base_SetConfig+0xec>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a20      	ldr	r2, [pc, #128]	; (8002d88 <TIM_Base_SetConfig+0xf0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <TIM_Base_SetConfig+0xf4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <TIM_Base_SetConfig+0xf8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <TIM_Base_SetConfig+0xfc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <TIM_Base_SetConfig+0xe4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d103      	bne.n	8002d68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	615a      	str	r2, [r3, #20]
}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	40014000 	.word	0x40014000
 8002d90:	40014400 	.word	0x40014400
 8002d94:	40014800 	.word	0x40014800

08002d98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <TIM_TI1_SetConfig+0xbc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <TIM_TI1_SetConfig+0x56>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dcc:	d00f      	beq.n	8002dee <TIM_TI1_SetConfig+0x56>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <TIM_TI1_SetConfig+0xc0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <TIM_TI1_SetConfig+0x56>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <TIM_TI1_SetConfig+0xc4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <TIM_TI1_SetConfig+0x56>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <TIM_TI1_SetConfig+0xc8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <TIM_TI1_SetConfig+0x56>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <TIM_TI1_SetConfig+0xcc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <TIM_TI1_SetConfig+0x5a>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <TIM_TI1_SetConfig+0x5c>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0303 	bic.w	r3, r3, #3
 8002dfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e003      	b.n	8002e12 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f023 030a 	bic.w	r3, r3, #10
 8002e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f003 030a 	and.w	r3, r3, #10
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40014000 	.word	0x40014000

08002e68 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f023 0210 	bic.w	r2, r3, #16
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ea6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	031b      	lsls	r3, r3, #12
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	621a      	str	r2, [r3, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b087      	sub	sp, #28
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002f32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	621a      	str	r2, [r3, #32]
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b087      	sub	sp, #28
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	031b      	lsls	r3, r3, #12
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002fac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	031b      	lsls	r3, r3, #12
 8002fb2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	621a      	str	r2, [r3, #32]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1a      	ldr	r2, [r3, #32]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e050      	b.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d018      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d013      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a18      	ldr	r2, [pc, #96]	; (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00e      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d009      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d004      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10c      	bne.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	40014000 	.word	0x40014000

080030fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e03f      	b.n	80031b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe f8f2 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2224      	movs	r2, #36	; 0x24
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fd19 	bl	8003ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800317c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800318c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	4613      	mov	r3, r2
 80031ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d130      	bne.n	800323a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_UART_Transmit_IT+0x26>
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e029      	b.n	800323c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Transmit_IT+0x38>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e022      	b.n	800323c <HAL_UART_Transmit_IT+0x7e>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	88fa      	ldrh	r2, [r7, #6]
 8003208:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	88fa      	ldrh	r2, [r7, #6]
 800320e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2221      	movs	r2, #33	; 0x21
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003234:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e000      	b.n	800323c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800323a:	2302      	movs	r3, #2
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	d11d      	bne.n	800329e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_UART_Receive_IT+0x26>
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e016      	b.n	80032a0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_UART_Receive_IT+0x38>
 800327c:	2302      	movs	r3, #2
 800327e:	e00f      	b.n	80032a0 <HAL_UART_Receive_IT+0x58>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	461a      	mov	r2, r3
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 faab 	bl	80037f0 <UART_Start_Receive_IT>
 800329a:	4603      	mov	r3, r0
 800329c:	e000      	b.n	80032a0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b0ba      	sub	sp, #232	; 0xe8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10f      	bne.n	800330e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_UART_IRQHandler+0x66>
 80032fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fb8f 	bl	8003a2a <UART_Receive_IT>
      return;
 800330c:	e256      	b.n	80037bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800330e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80de 	beq.w	80034d4 <HAL_UART_IRQHandler+0x22c>
 8003318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003328:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80d1 	beq.w	80034d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_UART_IRQHandler+0xae>
 800333e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_UART_IRQHandler+0xd2>
 8003362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0202 	orr.w	r2, r3, #2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_UART_IRQHandler+0xf6>
 8003386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0204 	orr.w	r2, r3, #4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800339e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d011      	beq.n	80033ce <HAL_UART_IRQHandler+0x126>
 80033aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f043 0208 	orr.w	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 81ed 	beq.w	80037b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_UART_IRQHandler+0x14e>
 80033e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fb1a 	bl	8003a2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <HAL_UART_IRQHandler+0x17a>
 800341a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04f      	beq.n	80034c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fa22 	bl	800386c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d141      	bne.n	80034ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3314      	adds	r3, #20
 800343c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800344c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003462:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800346e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800347a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1d9      	bne.n	8003436 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	2b00      	cmp	r3, #0
 8003488:	d013      	beq.n	80034b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	4a7d      	ldr	r2, [pc, #500]	; (8003684 <HAL_UART_IRQHandler+0x3dc>)
 8003490:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fa6b 	bl	8001972 <HAL_DMA_Abort_IT>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034ac:	4610      	mov	r0, r2
 80034ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	e00e      	b.n	80034d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f986 	bl	80037c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	e00a      	b.n	80034d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f982 	bl	80037c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	e006      	b.n	80034d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f97e 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034ce:	e170      	b.n	80037b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d0:	bf00      	nop
    return;
 80034d2:	e16e      	b.n	80037b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	2b01      	cmp	r3, #1
 80034da:	f040 814a 	bne.w	8003772 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8143 	beq.w	8003772 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 813c 	beq.w	8003772 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	f040 80b4 	bne.w	8003688 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800352c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8140 	beq.w	80037b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800353a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800353e:	429a      	cmp	r2, r3
 8003540:	f080 8139 	bcs.w	80037b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800354a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003556:	f000 8088 	beq.w	800366a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800358a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003592:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800359e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1d9      	bne.n	800355a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3314      	adds	r3, #20
 80035ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3314      	adds	r3, #20
 80035c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e1      	bne.n	80035a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3314      	adds	r3, #20
 80035e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3314      	adds	r3, #20
 8003602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003606:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003608:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800360c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e3      	bne.n	80035e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363a:	f023 0310 	bic.w	r3, r3, #16
 800363e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800364c:	65ba      	str	r2, [r7, #88]	; 0x58
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800365a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e3      	bne.n	8003628 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe f914 	bl	8001892 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003672:	b29b      	uxth	r3, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	b29b      	uxth	r3, r3
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8ac 	bl	80037d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003680:	e099      	b.n	80037b6 <HAL_UART_IRQHandler+0x50e>
 8003682:	bf00      	nop
 8003684:	08003933 	.word	0x08003933
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003690:	b29b      	uxth	r3, r3
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 808b 	beq.w	80037ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80036a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8086 	beq.w	80037ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036d2:	647a      	str	r2, [r7, #68]	; 0x44
 80036d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e3      	bne.n	80036ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	623b      	str	r3, [r7, #32]
   return(result);
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800370a:	633a      	str	r2, [r7, #48]	; 0x30
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e3      	bne.n	80036e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	60fb      	str	r3, [r7, #12]
   return(result);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0310 	bic.w	r3, r3, #16
 8003742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003750:	61fa      	str	r2, [r7, #28]
 8003752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	69b9      	ldr	r1, [r7, #24]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	617b      	str	r3, [r7, #20]
   return(result);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e3      	bne.n	800372c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f834 	bl	80037d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003770:	e023      	b.n	80037ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_UART_IRQHandler+0x4ea>
 800377e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f8e5 	bl	800395a <UART_Transmit_IT>
    return;
 8003790:	e014      	b.n	80037bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00e      	beq.n	80037bc <HAL_UART_IRQHandler+0x514>
 800379e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f925 	bl	80039fa <UART_EndTransmit_IT>
    return;
 80037b0:	e004      	b.n	80037bc <HAL_UART_IRQHandler+0x514>
    return;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <HAL_UART_IRQHandler+0x514>
      return;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_UART_IRQHandler+0x514>
      return;
 80037ba:	bf00      	nop
  }
}
 80037bc:	37e8      	adds	r7, #232	; 0xe8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop

080037c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2222      	movs	r2, #34	; 0x22
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800383c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0220 	orr.w	r2, r2, #32
 800385c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b095      	sub	sp, #84	; 0x54
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800388a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003894:	643a      	str	r2, [r7, #64]	; 0x40
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800389a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e5      	bne.n	8003874 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d119      	bne.n	8003918 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f023 0310 	bic.w	r3, r3, #16
 80038fa:	647b      	str	r3, [r7, #68]	; 0x44
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003904:	61ba      	str	r2, [r7, #24]
 8003906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6979      	ldr	r1, [r7, #20]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	613b      	str	r3, [r7, #16]
   return(result);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e5      	bne.n	80038e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003926:	bf00      	nop
 8003928:	3754      	adds	r7, #84	; 0x54
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff ff39 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b21      	cmp	r3, #33	; 0x21
 800396c:	d13e      	bne.n	80039ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d114      	bne.n	80039a2 <UART_Transmit_IT+0x48>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d110      	bne.n	80039a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003994:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	621a      	str	r2, [r3, #32]
 80039a0:	e008      	b.n	80039b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	1c59      	adds	r1, r3, #1
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6211      	str	r1, [r2, #32]
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29b      	uxth	r3, r3
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4619      	mov	r1, r3
 80039c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10f      	bne.n	80039e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd f9de 	bl	8000ddc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b08c      	sub	sp, #48	; 0x30
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b22      	cmp	r3, #34	; 0x22
 8003a3c:	f040 80ab 	bne.w	8003b96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a48:	d117      	bne.n	8003a7a <UART_Receive_IT+0x50>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d113      	bne.n	8003a7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	1c9a      	adds	r2, r3, #2
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
 8003a78:	e026      	b.n	8003ac8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d007      	beq.n	8003a9e <UART_Receive_IT+0x74>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <UART_Receive_IT+0x82>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e008      	b.n	8003abe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d15a      	bne.n	8003b92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0220 	bic.w	r2, r2, #32
 8003aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d135      	bne.n	8003b88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	613b      	str	r3, [r7, #16]
   return(result);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f023 0310 	bic.w	r3, r3, #16
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b42:	623a      	str	r2, [r7, #32]
 8003b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	69f9      	ldr	r1, [r7, #28]
 8003b48:	6a3a      	ldr	r2, [r7, #32]
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e5      	bne.n	8003b22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d10a      	bne.n	8003b7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff fe29 	bl	80037d8 <HAL_UARTEx_RxEventCallback>
 8003b86:	e002      	b.n	8003b8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fd f909 	bl	8000da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e002      	b.n	8003b98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3730      	adds	r7, #48	; 0x30
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b0c0      	sub	sp, #256	; 0x100
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	68d9      	ldr	r1, [r3, #12]
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	ea40 0301 	orr.w	r3, r0, r1
 8003bc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bf8:	f021 010c 	bic.w	r1, r1, #12
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c06:	430b      	orrs	r3, r1
 8003c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1a:	6999      	ldr	r1, [r3, #24]
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	ea40 0301 	orr.w	r3, r0, r1
 8003c26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b8f      	ldr	r3, [pc, #572]	; (8003e6c <UART_SetConfig+0x2cc>)
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d005      	beq.n	8003c40 <UART_SetConfig+0xa0>
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b8d      	ldr	r3, [pc, #564]	; (8003e70 <UART_SetConfig+0x2d0>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d104      	bne.n	8003c4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7fe fc9c 	bl	800257c <HAL_RCC_GetPCLK2Freq>
 8003c44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c48:	e003      	b.n	8003c52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c4a:	f7fe fc83 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8003c4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5c:	f040 810c 	bne.w	8003e78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c72:	4622      	mov	r2, r4
 8003c74:	462b      	mov	r3, r5
 8003c76:	1891      	adds	r1, r2, r2
 8003c78:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c7a:	415b      	adcs	r3, r3
 8003c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c82:	4621      	mov	r1, r4
 8003c84:	eb12 0801 	adds.w	r8, r2, r1
 8003c88:	4629      	mov	r1, r5
 8003c8a:	eb43 0901 	adc.w	r9, r3, r1
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca2:	4690      	mov	r8, r2
 8003ca4:	4699      	mov	r9, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	eb18 0303 	adds.w	r3, r8, r3
 8003cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	eb49 0303 	adc.w	r3, r9, r3
 8003cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cce:	460b      	mov	r3, r1
 8003cd0:	18db      	adds	r3, r3, r3
 8003cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	eb42 0303 	adc.w	r3, r2, r3
 8003cda:	657b      	str	r3, [r7, #84]	; 0x54
 8003cdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ce0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ce4:	f7fc feba 	bl	8000a5c <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003cee:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	011c      	lsls	r4, r3, #4
 8003cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	1891      	adds	r1, r2, r2
 8003d0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d10:	415b      	adcs	r3, r3
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d18:	4641      	mov	r1, r8
 8003d1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d1e:	4649      	mov	r1, r9
 8003d20:	eb43 0b01 	adc.w	fp, r3, r1
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d38:	4692      	mov	sl, r2
 8003d3a:	469b      	mov	fp, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d46:	464b      	mov	r3, r9
 8003d48:	eb4b 0303 	adc.w	r3, fp, r3
 8003d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d64:	460b      	mov	r3, r1
 8003d66:	18db      	adds	r3, r3, r3
 8003d68:	643b      	str	r3, [r7, #64]	; 0x40
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	647b      	str	r3, [r7, #68]	; 0x44
 8003d72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d7a:	f7fc fe6f 	bl	8000a5c <__aeabi_uldivmod>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003d86:	fba3 2301 	umull	r2, r3, r3, r1
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2264      	movs	r2, #100	; 0x64
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	1acb      	subs	r3, r1, r3
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d9a:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003da8:	441c      	add	r4, r3
 8003daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003db4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003db8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	1891      	adds	r1, r2, r2
 8003dc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dcc:	4641      	mov	r1, r8
 8003dce:	1851      	adds	r1, r2, r1
 8003dd0:	6339      	str	r1, [r7, #48]	; 0x30
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	414b      	adcs	r3, r1
 8003dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003de4:	4659      	mov	r1, fp
 8003de6:	00cb      	lsls	r3, r1, #3
 8003de8:	4651      	mov	r1, sl
 8003dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dee:	4651      	mov	r1, sl
 8003df0:	00ca      	lsls	r2, r1, #3
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	4603      	mov	r3, r0
 8003df8:	4642      	mov	r2, r8
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e00:	464b      	mov	r3, r9
 8003e02:	460a      	mov	r2, r1
 8003e04:	eb42 0303 	adc.w	r3, r2, r3
 8003e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e20:	460b      	mov	r3, r1
 8003e22:	18db      	adds	r3, r3, r3
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e26:	4613      	mov	r3, r2
 8003e28:	eb42 0303 	adc.w	r3, r2, r3
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e36:	f7fc fe11 	bl	8000a5c <__aeabi_uldivmod>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003e40:	fba3 1302 	umull	r1, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	2164      	movs	r1, #100	; 0x64
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	3332      	adds	r3, #50	; 0x32
 8003e52:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	f003 0207 	and.w	r2, r3, #7
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4422      	add	r2, r4
 8003e66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e68:	e106      	b.n	8004078 <UART_SetConfig+0x4d8>
 8003e6a:	bf00      	nop
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	40011400 	.word	0x40011400
 8003e74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e8a:	4642      	mov	r2, r8
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	1891      	adds	r1, r2, r2
 8003e90:	6239      	str	r1, [r7, #32]
 8003e92:	415b      	adcs	r3, r3
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
 8003e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	1854      	adds	r4, r2, r1
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	eb43 0501 	adc.w	r5, r3, r1
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	00eb      	lsls	r3, r5, #3
 8003eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb2:	00e2      	lsls	r2, r4, #3
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	4643      	mov	r3, r8
 8003eba:	18e3      	adds	r3, r4, r3
 8003ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	eb45 0303 	adc.w	r3, r5, r3
 8003ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ed6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	008b      	lsls	r3, r1, #2
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	008a      	lsls	r2, r1, #2
 8003ef4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ef8:	f7fc fdb0 	bl	8000a5c <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4b60      	ldr	r3, [pc, #384]	; (8004084 <UART_SetConfig+0x4e4>)
 8003f02:	fba3 2302 	umull	r2, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	011c      	lsls	r4, r3, #4
 8003f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	61b9      	str	r1, [r7, #24]
 8003f24:	415b      	adcs	r3, r3
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	1851      	adds	r1, r2, r1
 8003f30:	6139      	str	r1, [r7, #16]
 8003f32:	4649      	mov	r1, r9
 8003f34:	414b      	adcs	r3, r1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f44:	4659      	mov	r1, fp
 8003f46:	00cb      	lsls	r3, r1, #3
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4e:	4651      	mov	r1, sl
 8003f50:	00ca      	lsls	r2, r1, #3
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	4642      	mov	r2, r8
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f60:	464b      	mov	r3, r9
 8003f62:	460a      	mov	r2, r1
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f84:	4649      	mov	r1, r9
 8003f86:	008b      	lsls	r3, r1, #2
 8003f88:	4641      	mov	r1, r8
 8003f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8e:	4641      	mov	r1, r8
 8003f90:	008a      	lsls	r2, r1, #2
 8003f92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f96:	f7fc fd61 	bl	8000a5c <__aeabi_uldivmod>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4b38      	ldr	r3, [pc, #224]	; (8004084 <UART_SetConfig+0x4e4>)
 8003fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2264      	movs	r2, #100	; 0x64
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	1acb      	subs	r3, r1, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	3332      	adds	r3, #50	; 0x32
 8003fb4:	4a33      	ldr	r2, [pc, #204]	; (8004084 <UART_SetConfig+0x4e4>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	441c      	add	r4, r3
 8003fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	673b      	str	r3, [r7, #112]	; 0x70
 8003fca:	677a      	str	r2, [r7, #116]	; 0x74
 8003fcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	1891      	adds	r1, r2, r2
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	415b      	adcs	r3, r3
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	1851      	adds	r1, r2, r1
 8003fe4:	6039      	str	r1, [r7, #0]
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	414b      	adcs	r3, r1
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ff8:	4659      	mov	r1, fp
 8003ffa:	00cb      	lsls	r3, r1, #3
 8003ffc:	4651      	mov	r1, sl
 8003ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004002:	4651      	mov	r1, sl
 8004004:	00ca      	lsls	r2, r1, #3
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	4603      	mov	r3, r0
 800400c:	4642      	mov	r2, r8
 800400e:	189b      	adds	r3, r3, r2
 8004010:	66bb      	str	r3, [r7, #104]	; 0x68
 8004012:	464b      	mov	r3, r9
 8004014:	460a      	mov	r2, r1
 8004016:	eb42 0303 	adc.w	r3, r2, r3
 800401a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	663b      	str	r3, [r7, #96]	; 0x60
 8004026:	667a      	str	r2, [r7, #100]	; 0x64
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004034:	4649      	mov	r1, r9
 8004036:	008b      	lsls	r3, r1, #2
 8004038:	4641      	mov	r1, r8
 800403a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800403e:	4641      	mov	r1, r8
 8004040:	008a      	lsls	r2, r1, #2
 8004042:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004046:	f7fc fd09 	bl	8000a5c <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <UART_SetConfig+0x4e4>)
 8004050:	fba3 1302 	umull	r1, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	2164      	movs	r1, #100	; 0x64
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	3332      	adds	r3, #50	; 0x32
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <UART_SetConfig+0x4e4>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	f003 020f 	and.w	r2, r3, #15
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4422      	add	r2, r4
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800407e:	46bd      	mov	sp, r7
 8004080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004084:	51eb851f 	.word	0x51eb851f

08004088 <siprintf>:
 8004088:	b40e      	push	{r1, r2, r3}
 800408a:	b500      	push	{lr}
 800408c:	b09c      	sub	sp, #112	; 0x70
 800408e:	ab1d      	add	r3, sp, #116	; 0x74
 8004090:	9002      	str	r0, [sp, #8]
 8004092:	9006      	str	r0, [sp, #24]
 8004094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004098:	4809      	ldr	r0, [pc, #36]	; (80040c0 <siprintf+0x38>)
 800409a:	9107      	str	r1, [sp, #28]
 800409c:	9104      	str	r1, [sp, #16]
 800409e:	4909      	ldr	r1, [pc, #36]	; (80040c4 <siprintf+0x3c>)
 80040a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040a4:	9105      	str	r1, [sp, #20]
 80040a6:	6800      	ldr	r0, [r0, #0]
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	a902      	add	r1, sp, #8
 80040ac:	f000 f992 	bl	80043d4 <_svfiprintf_r>
 80040b0:	9b02      	ldr	r3, [sp, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	b01c      	add	sp, #112	; 0x70
 80040b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040bc:	b003      	add	sp, #12
 80040be:	4770      	bx	lr
 80040c0:	20000058 	.word	0x20000058
 80040c4:	ffff0208 	.word	0xffff0208

080040c8 <memset>:
 80040c8:	4402      	add	r2, r0
 80040ca:	4603      	mov	r3, r0
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d100      	bne.n	80040d2 <memset+0xa>
 80040d0:	4770      	bx	lr
 80040d2:	f803 1b01 	strb.w	r1, [r3], #1
 80040d6:	e7f9      	b.n	80040cc <memset+0x4>

080040d8 <__errno>:
 80040d8:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <__errno+0x8>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000058 	.word	0x20000058

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4d0d      	ldr	r5, [pc, #52]	; (800411c <__libc_init_array+0x38>)
 80040e8:	4c0d      	ldr	r4, [pc, #52]	; (8004120 <__libc_init_array+0x3c>)
 80040ea:	1b64      	subs	r4, r4, r5
 80040ec:	10a4      	asrs	r4, r4, #2
 80040ee:	2600      	movs	r6, #0
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	4d0b      	ldr	r5, [pc, #44]	; (8004124 <__libc_init_array+0x40>)
 80040f6:	4c0c      	ldr	r4, [pc, #48]	; (8004128 <__libc_init_array+0x44>)
 80040f8:	f000 fc6a 	bl	80049d0 <_init>
 80040fc:	1b64      	subs	r4, r4, r5
 80040fe:	10a4      	asrs	r4, r4, #2
 8004100:	2600      	movs	r6, #0
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f855 3b04 	ldr.w	r3, [r5], #4
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f855 3b04 	ldr.w	r3, [r5], #4
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	08004a50 	.word	0x08004a50
 8004120:	08004a50 	.word	0x08004a50
 8004124:	08004a50 	.word	0x08004a50
 8004128:	08004a54 	.word	0x08004a54

0800412c <__retarget_lock_acquire_recursive>:
 800412c:	4770      	bx	lr

0800412e <__retarget_lock_release_recursive>:
 800412e:	4770      	bx	lr

08004130 <_free_r>:
 8004130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004132:	2900      	cmp	r1, #0
 8004134:	d044      	beq.n	80041c0 <_free_r+0x90>
 8004136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800413a:	9001      	str	r0, [sp, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f1a1 0404 	sub.w	r4, r1, #4
 8004142:	bfb8      	it	lt
 8004144:	18e4      	addlt	r4, r4, r3
 8004146:	f000 f8df 	bl	8004308 <__malloc_lock>
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <_free_r+0x94>)
 800414c:	9801      	ldr	r0, [sp, #4]
 800414e:	6813      	ldr	r3, [r2, #0]
 8004150:	b933      	cbnz	r3, 8004160 <_free_r+0x30>
 8004152:	6063      	str	r3, [r4, #4]
 8004154:	6014      	str	r4, [r2, #0]
 8004156:	b003      	add	sp, #12
 8004158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800415c:	f000 b8da 	b.w	8004314 <__malloc_unlock>
 8004160:	42a3      	cmp	r3, r4
 8004162:	d908      	bls.n	8004176 <_free_r+0x46>
 8004164:	6825      	ldr	r5, [r4, #0]
 8004166:	1961      	adds	r1, r4, r5
 8004168:	428b      	cmp	r3, r1
 800416a:	bf01      	itttt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	1949      	addeq	r1, r1, r5
 8004172:	6021      	streq	r1, [r4, #0]
 8004174:	e7ed      	b.n	8004152 <_free_r+0x22>
 8004176:	461a      	mov	r2, r3
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	b10b      	cbz	r3, 8004180 <_free_r+0x50>
 800417c:	42a3      	cmp	r3, r4
 800417e:	d9fa      	bls.n	8004176 <_free_r+0x46>
 8004180:	6811      	ldr	r1, [r2, #0]
 8004182:	1855      	adds	r5, r2, r1
 8004184:	42a5      	cmp	r5, r4
 8004186:	d10b      	bne.n	80041a0 <_free_r+0x70>
 8004188:	6824      	ldr	r4, [r4, #0]
 800418a:	4421      	add	r1, r4
 800418c:	1854      	adds	r4, r2, r1
 800418e:	42a3      	cmp	r3, r4
 8004190:	6011      	str	r1, [r2, #0]
 8004192:	d1e0      	bne.n	8004156 <_free_r+0x26>
 8004194:	681c      	ldr	r4, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	6053      	str	r3, [r2, #4]
 800419a:	440c      	add	r4, r1
 800419c:	6014      	str	r4, [r2, #0]
 800419e:	e7da      	b.n	8004156 <_free_r+0x26>
 80041a0:	d902      	bls.n	80041a8 <_free_r+0x78>
 80041a2:	230c      	movs	r3, #12
 80041a4:	6003      	str	r3, [r0, #0]
 80041a6:	e7d6      	b.n	8004156 <_free_r+0x26>
 80041a8:	6825      	ldr	r5, [r4, #0]
 80041aa:	1961      	adds	r1, r4, r5
 80041ac:	428b      	cmp	r3, r1
 80041ae:	bf04      	itt	eq
 80041b0:	6819      	ldreq	r1, [r3, #0]
 80041b2:	685b      	ldreq	r3, [r3, #4]
 80041b4:	6063      	str	r3, [r4, #4]
 80041b6:	bf04      	itt	eq
 80041b8:	1949      	addeq	r1, r1, r5
 80041ba:	6021      	streq	r1, [r4, #0]
 80041bc:	6054      	str	r4, [r2, #4]
 80041be:	e7ca      	b.n	8004156 <_free_r+0x26>
 80041c0:	b003      	add	sp, #12
 80041c2:	bd30      	pop	{r4, r5, pc}
 80041c4:	20000284 	.word	0x20000284

080041c8 <sbrk_aligned>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	4e0e      	ldr	r6, [pc, #56]	; (8004204 <sbrk_aligned+0x3c>)
 80041cc:	460c      	mov	r4, r1
 80041ce:	6831      	ldr	r1, [r6, #0]
 80041d0:	4605      	mov	r5, r0
 80041d2:	b911      	cbnz	r1, 80041da <sbrk_aligned+0x12>
 80041d4:	f000 fba6 	bl	8004924 <_sbrk_r>
 80041d8:	6030      	str	r0, [r6, #0]
 80041da:	4621      	mov	r1, r4
 80041dc:	4628      	mov	r0, r5
 80041de:	f000 fba1 	bl	8004924 <_sbrk_r>
 80041e2:	1c43      	adds	r3, r0, #1
 80041e4:	d00a      	beq.n	80041fc <sbrk_aligned+0x34>
 80041e6:	1cc4      	adds	r4, r0, #3
 80041e8:	f024 0403 	bic.w	r4, r4, #3
 80041ec:	42a0      	cmp	r0, r4
 80041ee:	d007      	beq.n	8004200 <sbrk_aligned+0x38>
 80041f0:	1a21      	subs	r1, r4, r0
 80041f2:	4628      	mov	r0, r5
 80041f4:	f000 fb96 	bl	8004924 <_sbrk_r>
 80041f8:	3001      	adds	r0, #1
 80041fa:	d101      	bne.n	8004200 <sbrk_aligned+0x38>
 80041fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004200:	4620      	mov	r0, r4
 8004202:	bd70      	pop	{r4, r5, r6, pc}
 8004204:	20000288 	.word	0x20000288

08004208 <_malloc_r>:
 8004208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800420c:	1ccd      	adds	r5, r1, #3
 800420e:	f025 0503 	bic.w	r5, r5, #3
 8004212:	3508      	adds	r5, #8
 8004214:	2d0c      	cmp	r5, #12
 8004216:	bf38      	it	cc
 8004218:	250c      	movcc	r5, #12
 800421a:	2d00      	cmp	r5, #0
 800421c:	4607      	mov	r7, r0
 800421e:	db01      	blt.n	8004224 <_malloc_r+0x1c>
 8004220:	42a9      	cmp	r1, r5
 8004222:	d905      	bls.n	8004230 <_malloc_r+0x28>
 8004224:	230c      	movs	r3, #12
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	2600      	movs	r6, #0
 800422a:	4630      	mov	r0, r6
 800422c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004304 <_malloc_r+0xfc>
 8004234:	f000 f868 	bl	8004308 <__malloc_lock>
 8004238:	f8d8 3000 	ldr.w	r3, [r8]
 800423c:	461c      	mov	r4, r3
 800423e:	bb5c      	cbnz	r4, 8004298 <_malloc_r+0x90>
 8004240:	4629      	mov	r1, r5
 8004242:	4638      	mov	r0, r7
 8004244:	f7ff ffc0 	bl	80041c8 <sbrk_aligned>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	4604      	mov	r4, r0
 800424c:	d155      	bne.n	80042fa <_malloc_r+0xf2>
 800424e:	f8d8 4000 	ldr.w	r4, [r8]
 8004252:	4626      	mov	r6, r4
 8004254:	2e00      	cmp	r6, #0
 8004256:	d145      	bne.n	80042e4 <_malloc_r+0xdc>
 8004258:	2c00      	cmp	r4, #0
 800425a:	d048      	beq.n	80042ee <_malloc_r+0xe6>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	4631      	mov	r1, r6
 8004260:	4638      	mov	r0, r7
 8004262:	eb04 0903 	add.w	r9, r4, r3
 8004266:	f000 fb5d 	bl	8004924 <_sbrk_r>
 800426a:	4581      	cmp	r9, r0
 800426c:	d13f      	bne.n	80042ee <_malloc_r+0xe6>
 800426e:	6821      	ldr	r1, [r4, #0]
 8004270:	1a6d      	subs	r5, r5, r1
 8004272:	4629      	mov	r1, r5
 8004274:	4638      	mov	r0, r7
 8004276:	f7ff ffa7 	bl	80041c8 <sbrk_aligned>
 800427a:	3001      	adds	r0, #1
 800427c:	d037      	beq.n	80042ee <_malloc_r+0xe6>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	442b      	add	r3, r5
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	f8d8 3000 	ldr.w	r3, [r8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d038      	beq.n	80042fe <_malloc_r+0xf6>
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	42a2      	cmp	r2, r4
 8004290:	d12b      	bne.n	80042ea <_malloc_r+0xe2>
 8004292:	2200      	movs	r2, #0
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	e00f      	b.n	80042b8 <_malloc_r+0xb0>
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	1b52      	subs	r2, r2, r5
 800429c:	d41f      	bmi.n	80042de <_malloc_r+0xd6>
 800429e:	2a0b      	cmp	r2, #11
 80042a0:	d917      	bls.n	80042d2 <_malloc_r+0xca>
 80042a2:	1961      	adds	r1, r4, r5
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	6025      	str	r5, [r4, #0]
 80042a8:	bf18      	it	ne
 80042aa:	6059      	strne	r1, [r3, #4]
 80042ac:	6863      	ldr	r3, [r4, #4]
 80042ae:	bf08      	it	eq
 80042b0:	f8c8 1000 	streq.w	r1, [r8]
 80042b4:	5162      	str	r2, [r4, r5]
 80042b6:	604b      	str	r3, [r1, #4]
 80042b8:	4638      	mov	r0, r7
 80042ba:	f104 060b 	add.w	r6, r4, #11
 80042be:	f000 f829 	bl	8004314 <__malloc_unlock>
 80042c2:	f026 0607 	bic.w	r6, r6, #7
 80042c6:	1d23      	adds	r3, r4, #4
 80042c8:	1af2      	subs	r2, r6, r3
 80042ca:	d0ae      	beq.n	800422a <_malloc_r+0x22>
 80042cc:	1b9b      	subs	r3, r3, r6
 80042ce:	50a3      	str	r3, [r4, r2]
 80042d0:	e7ab      	b.n	800422a <_malloc_r+0x22>
 80042d2:	42a3      	cmp	r3, r4
 80042d4:	6862      	ldr	r2, [r4, #4]
 80042d6:	d1dd      	bne.n	8004294 <_malloc_r+0x8c>
 80042d8:	f8c8 2000 	str.w	r2, [r8]
 80042dc:	e7ec      	b.n	80042b8 <_malloc_r+0xb0>
 80042de:	4623      	mov	r3, r4
 80042e0:	6864      	ldr	r4, [r4, #4]
 80042e2:	e7ac      	b.n	800423e <_malloc_r+0x36>
 80042e4:	4634      	mov	r4, r6
 80042e6:	6876      	ldr	r6, [r6, #4]
 80042e8:	e7b4      	b.n	8004254 <_malloc_r+0x4c>
 80042ea:	4613      	mov	r3, r2
 80042ec:	e7cc      	b.n	8004288 <_malloc_r+0x80>
 80042ee:	230c      	movs	r3, #12
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	4638      	mov	r0, r7
 80042f4:	f000 f80e 	bl	8004314 <__malloc_unlock>
 80042f8:	e797      	b.n	800422a <_malloc_r+0x22>
 80042fa:	6025      	str	r5, [r4, #0]
 80042fc:	e7dc      	b.n	80042b8 <_malloc_r+0xb0>
 80042fe:	605b      	str	r3, [r3, #4]
 8004300:	deff      	udf	#255	; 0xff
 8004302:	bf00      	nop
 8004304:	20000284 	.word	0x20000284

08004308 <__malloc_lock>:
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <__malloc_lock+0x8>)
 800430a:	f7ff bf0f 	b.w	800412c <__retarget_lock_acquire_recursive>
 800430e:	bf00      	nop
 8004310:	20000280 	.word	0x20000280

08004314 <__malloc_unlock>:
 8004314:	4801      	ldr	r0, [pc, #4]	; (800431c <__malloc_unlock+0x8>)
 8004316:	f7ff bf0a 	b.w	800412e <__retarget_lock_release_recursive>
 800431a:	bf00      	nop
 800431c:	20000280 	.word	0x20000280

08004320 <__ssputs_r>:
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	688e      	ldr	r6, [r1, #8]
 8004326:	461f      	mov	r7, r3
 8004328:	42be      	cmp	r6, r7
 800432a:	680b      	ldr	r3, [r1, #0]
 800432c:	4682      	mov	sl, r0
 800432e:	460c      	mov	r4, r1
 8004330:	4690      	mov	r8, r2
 8004332:	d82c      	bhi.n	800438e <__ssputs_r+0x6e>
 8004334:	898a      	ldrh	r2, [r1, #12]
 8004336:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800433a:	d026      	beq.n	800438a <__ssputs_r+0x6a>
 800433c:	6965      	ldr	r5, [r4, #20]
 800433e:	6909      	ldr	r1, [r1, #16]
 8004340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004344:	eba3 0901 	sub.w	r9, r3, r1
 8004348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800434c:	1c7b      	adds	r3, r7, #1
 800434e:	444b      	add	r3, r9
 8004350:	106d      	asrs	r5, r5, #1
 8004352:	429d      	cmp	r5, r3
 8004354:	bf38      	it	cc
 8004356:	461d      	movcc	r5, r3
 8004358:	0553      	lsls	r3, r2, #21
 800435a:	d527      	bpl.n	80043ac <__ssputs_r+0x8c>
 800435c:	4629      	mov	r1, r5
 800435e:	f7ff ff53 	bl	8004208 <_malloc_r>
 8004362:	4606      	mov	r6, r0
 8004364:	b360      	cbz	r0, 80043c0 <__ssputs_r+0xa0>
 8004366:	6921      	ldr	r1, [r4, #16]
 8004368:	464a      	mov	r2, r9
 800436a:	f000 faeb 	bl	8004944 <memcpy>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004378:	81a3      	strh	r3, [r4, #12]
 800437a:	6126      	str	r6, [r4, #16]
 800437c:	6165      	str	r5, [r4, #20]
 800437e:	444e      	add	r6, r9
 8004380:	eba5 0509 	sub.w	r5, r5, r9
 8004384:	6026      	str	r6, [r4, #0]
 8004386:	60a5      	str	r5, [r4, #8]
 8004388:	463e      	mov	r6, r7
 800438a:	42be      	cmp	r6, r7
 800438c:	d900      	bls.n	8004390 <__ssputs_r+0x70>
 800438e:	463e      	mov	r6, r7
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	4632      	mov	r2, r6
 8004394:	4641      	mov	r1, r8
 8004396:	f000 faab 	bl	80048f0 <memmove>
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	1b9b      	subs	r3, r3, r6
 800439e:	60a3      	str	r3, [r4, #8]
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	4433      	add	r3, r6
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	2000      	movs	r0, #0
 80043a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ac:	462a      	mov	r2, r5
 80043ae:	f000 fad7 	bl	8004960 <_realloc_r>
 80043b2:	4606      	mov	r6, r0
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d1e0      	bne.n	800437a <__ssputs_r+0x5a>
 80043b8:	6921      	ldr	r1, [r4, #16]
 80043ba:	4650      	mov	r0, sl
 80043bc:	f7ff feb8 	bl	8004130 <_free_r>
 80043c0:	230c      	movs	r3, #12
 80043c2:	f8ca 3000 	str.w	r3, [sl]
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043cc:	81a3      	strh	r3, [r4, #12]
 80043ce:	f04f 30ff 	mov.w	r0, #4294967295
 80043d2:	e7e9      	b.n	80043a8 <__ssputs_r+0x88>

080043d4 <_svfiprintf_r>:
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	4698      	mov	r8, r3
 80043da:	898b      	ldrh	r3, [r1, #12]
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	b09d      	sub	sp, #116	; 0x74
 80043e0:	4607      	mov	r7, r0
 80043e2:	460d      	mov	r5, r1
 80043e4:	4614      	mov	r4, r2
 80043e6:	d50e      	bpl.n	8004406 <_svfiprintf_r+0x32>
 80043e8:	690b      	ldr	r3, [r1, #16]
 80043ea:	b963      	cbnz	r3, 8004406 <_svfiprintf_r+0x32>
 80043ec:	2140      	movs	r1, #64	; 0x40
 80043ee:	f7ff ff0b 	bl	8004208 <_malloc_r>
 80043f2:	6028      	str	r0, [r5, #0]
 80043f4:	6128      	str	r0, [r5, #16]
 80043f6:	b920      	cbnz	r0, 8004402 <_svfiprintf_r+0x2e>
 80043f8:	230c      	movs	r3, #12
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	e0d0      	b.n	80045a4 <_svfiprintf_r+0x1d0>
 8004402:	2340      	movs	r3, #64	; 0x40
 8004404:	616b      	str	r3, [r5, #20]
 8004406:	2300      	movs	r3, #0
 8004408:	9309      	str	r3, [sp, #36]	; 0x24
 800440a:	2320      	movs	r3, #32
 800440c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004410:	f8cd 800c 	str.w	r8, [sp, #12]
 8004414:	2330      	movs	r3, #48	; 0x30
 8004416:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045bc <_svfiprintf_r+0x1e8>
 800441a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800441e:	f04f 0901 	mov.w	r9, #1
 8004422:	4623      	mov	r3, r4
 8004424:	469a      	mov	sl, r3
 8004426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800442a:	b10a      	cbz	r2, 8004430 <_svfiprintf_r+0x5c>
 800442c:	2a25      	cmp	r2, #37	; 0x25
 800442e:	d1f9      	bne.n	8004424 <_svfiprintf_r+0x50>
 8004430:	ebba 0b04 	subs.w	fp, sl, r4
 8004434:	d00b      	beq.n	800444e <_svfiprintf_r+0x7a>
 8004436:	465b      	mov	r3, fp
 8004438:	4622      	mov	r2, r4
 800443a:	4629      	mov	r1, r5
 800443c:	4638      	mov	r0, r7
 800443e:	f7ff ff6f 	bl	8004320 <__ssputs_r>
 8004442:	3001      	adds	r0, #1
 8004444:	f000 80a9 	beq.w	800459a <_svfiprintf_r+0x1c6>
 8004448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800444a:	445a      	add	r2, fp
 800444c:	9209      	str	r2, [sp, #36]	; 0x24
 800444e:	f89a 3000 	ldrb.w	r3, [sl]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80a1 	beq.w	800459a <_svfiprintf_r+0x1c6>
 8004458:	2300      	movs	r3, #0
 800445a:	f04f 32ff 	mov.w	r2, #4294967295
 800445e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004462:	f10a 0a01 	add.w	sl, sl, #1
 8004466:	9304      	str	r3, [sp, #16]
 8004468:	9307      	str	r3, [sp, #28]
 800446a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800446e:	931a      	str	r3, [sp, #104]	; 0x68
 8004470:	4654      	mov	r4, sl
 8004472:	2205      	movs	r2, #5
 8004474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004478:	4850      	ldr	r0, [pc, #320]	; (80045bc <_svfiprintf_r+0x1e8>)
 800447a:	f7fb feb1 	bl	80001e0 <memchr>
 800447e:	9a04      	ldr	r2, [sp, #16]
 8004480:	b9d8      	cbnz	r0, 80044ba <_svfiprintf_r+0xe6>
 8004482:	06d0      	lsls	r0, r2, #27
 8004484:	bf44      	itt	mi
 8004486:	2320      	movmi	r3, #32
 8004488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800448c:	0711      	lsls	r1, r2, #28
 800448e:	bf44      	itt	mi
 8004490:	232b      	movmi	r3, #43	; 0x2b
 8004492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004496:	f89a 3000 	ldrb.w	r3, [sl]
 800449a:	2b2a      	cmp	r3, #42	; 0x2a
 800449c:	d015      	beq.n	80044ca <_svfiprintf_r+0xf6>
 800449e:	9a07      	ldr	r2, [sp, #28]
 80044a0:	4654      	mov	r4, sl
 80044a2:	2000      	movs	r0, #0
 80044a4:	f04f 0c0a 	mov.w	ip, #10
 80044a8:	4621      	mov	r1, r4
 80044aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ae:	3b30      	subs	r3, #48	; 0x30
 80044b0:	2b09      	cmp	r3, #9
 80044b2:	d94d      	bls.n	8004550 <_svfiprintf_r+0x17c>
 80044b4:	b1b0      	cbz	r0, 80044e4 <_svfiprintf_r+0x110>
 80044b6:	9207      	str	r2, [sp, #28]
 80044b8:	e014      	b.n	80044e4 <_svfiprintf_r+0x110>
 80044ba:	eba0 0308 	sub.w	r3, r0, r8
 80044be:	fa09 f303 	lsl.w	r3, r9, r3
 80044c2:	4313      	orrs	r3, r2
 80044c4:	9304      	str	r3, [sp, #16]
 80044c6:	46a2      	mov	sl, r4
 80044c8:	e7d2      	b.n	8004470 <_svfiprintf_r+0x9c>
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	1d19      	adds	r1, r3, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	9103      	str	r1, [sp, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bfbb      	ittet	lt
 80044d6:	425b      	neglt	r3, r3
 80044d8:	f042 0202 	orrlt.w	r2, r2, #2
 80044dc:	9307      	strge	r3, [sp, #28]
 80044de:	9307      	strlt	r3, [sp, #28]
 80044e0:	bfb8      	it	lt
 80044e2:	9204      	strlt	r2, [sp, #16]
 80044e4:	7823      	ldrb	r3, [r4, #0]
 80044e6:	2b2e      	cmp	r3, #46	; 0x2e
 80044e8:	d10c      	bne.n	8004504 <_svfiprintf_r+0x130>
 80044ea:	7863      	ldrb	r3, [r4, #1]
 80044ec:	2b2a      	cmp	r3, #42	; 0x2a
 80044ee:	d134      	bne.n	800455a <_svfiprintf_r+0x186>
 80044f0:	9b03      	ldr	r3, [sp, #12]
 80044f2:	1d1a      	adds	r2, r3, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	9203      	str	r2, [sp, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bfb8      	it	lt
 80044fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004500:	3402      	adds	r4, #2
 8004502:	9305      	str	r3, [sp, #20]
 8004504:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80045cc <_svfiprintf_r+0x1f8>
 8004508:	7821      	ldrb	r1, [r4, #0]
 800450a:	2203      	movs	r2, #3
 800450c:	4650      	mov	r0, sl
 800450e:	f7fb fe67 	bl	80001e0 <memchr>
 8004512:	b138      	cbz	r0, 8004524 <_svfiprintf_r+0x150>
 8004514:	9b04      	ldr	r3, [sp, #16]
 8004516:	eba0 000a 	sub.w	r0, r0, sl
 800451a:	2240      	movs	r2, #64	; 0x40
 800451c:	4082      	lsls	r2, r0
 800451e:	4313      	orrs	r3, r2
 8004520:	3401      	adds	r4, #1
 8004522:	9304      	str	r3, [sp, #16]
 8004524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004528:	4825      	ldr	r0, [pc, #148]	; (80045c0 <_svfiprintf_r+0x1ec>)
 800452a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800452e:	2206      	movs	r2, #6
 8004530:	f7fb fe56 	bl	80001e0 <memchr>
 8004534:	2800      	cmp	r0, #0
 8004536:	d038      	beq.n	80045aa <_svfiprintf_r+0x1d6>
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <_svfiprintf_r+0x1f0>)
 800453a:	bb1b      	cbnz	r3, 8004584 <_svfiprintf_r+0x1b0>
 800453c:	9b03      	ldr	r3, [sp, #12]
 800453e:	3307      	adds	r3, #7
 8004540:	f023 0307 	bic.w	r3, r3, #7
 8004544:	3308      	adds	r3, #8
 8004546:	9303      	str	r3, [sp, #12]
 8004548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800454a:	4433      	add	r3, r6
 800454c:	9309      	str	r3, [sp, #36]	; 0x24
 800454e:	e768      	b.n	8004422 <_svfiprintf_r+0x4e>
 8004550:	fb0c 3202 	mla	r2, ip, r2, r3
 8004554:	460c      	mov	r4, r1
 8004556:	2001      	movs	r0, #1
 8004558:	e7a6      	b.n	80044a8 <_svfiprintf_r+0xd4>
 800455a:	2300      	movs	r3, #0
 800455c:	3401      	adds	r4, #1
 800455e:	9305      	str	r3, [sp, #20]
 8004560:	4619      	mov	r1, r3
 8004562:	f04f 0c0a 	mov.w	ip, #10
 8004566:	4620      	mov	r0, r4
 8004568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800456c:	3a30      	subs	r2, #48	; 0x30
 800456e:	2a09      	cmp	r2, #9
 8004570:	d903      	bls.n	800457a <_svfiprintf_r+0x1a6>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0c6      	beq.n	8004504 <_svfiprintf_r+0x130>
 8004576:	9105      	str	r1, [sp, #20]
 8004578:	e7c4      	b.n	8004504 <_svfiprintf_r+0x130>
 800457a:	fb0c 2101 	mla	r1, ip, r1, r2
 800457e:	4604      	mov	r4, r0
 8004580:	2301      	movs	r3, #1
 8004582:	e7f0      	b.n	8004566 <_svfiprintf_r+0x192>
 8004584:	ab03      	add	r3, sp, #12
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	462a      	mov	r2, r5
 800458a:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <_svfiprintf_r+0x1f4>)
 800458c:	a904      	add	r1, sp, #16
 800458e:	4638      	mov	r0, r7
 8004590:	f3af 8000 	nop.w
 8004594:	1c42      	adds	r2, r0, #1
 8004596:	4606      	mov	r6, r0
 8004598:	d1d6      	bne.n	8004548 <_svfiprintf_r+0x174>
 800459a:	89ab      	ldrh	r3, [r5, #12]
 800459c:	065b      	lsls	r3, r3, #25
 800459e:	f53f af2d 	bmi.w	80043fc <_svfiprintf_r+0x28>
 80045a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045a4:	b01d      	add	sp, #116	; 0x74
 80045a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045aa:	ab03      	add	r3, sp, #12
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	462a      	mov	r2, r5
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <_svfiprintf_r+0x1f4>)
 80045b2:	a904      	add	r1, sp, #16
 80045b4:	4638      	mov	r0, r7
 80045b6:	f000 f879 	bl	80046ac <_printf_i>
 80045ba:	e7eb      	b.n	8004594 <_svfiprintf_r+0x1c0>
 80045bc:	08004a14 	.word	0x08004a14
 80045c0:	08004a1e 	.word	0x08004a1e
 80045c4:	00000000 	.word	0x00000000
 80045c8:	08004321 	.word	0x08004321
 80045cc:	08004a1a 	.word	0x08004a1a

080045d0 <_printf_common>:
 80045d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d4:	4616      	mov	r6, r2
 80045d6:	4699      	mov	r9, r3
 80045d8:	688a      	ldr	r2, [r1, #8]
 80045da:	690b      	ldr	r3, [r1, #16]
 80045dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bfb8      	it	lt
 80045e4:	4613      	movlt	r3, r2
 80045e6:	6033      	str	r3, [r6, #0]
 80045e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045ec:	4607      	mov	r7, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	b10a      	cbz	r2, 80045f6 <_printf_common+0x26>
 80045f2:	3301      	adds	r3, #1
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	0699      	lsls	r1, r3, #26
 80045fa:	bf42      	ittt	mi
 80045fc:	6833      	ldrmi	r3, [r6, #0]
 80045fe:	3302      	addmi	r3, #2
 8004600:	6033      	strmi	r3, [r6, #0]
 8004602:	6825      	ldr	r5, [r4, #0]
 8004604:	f015 0506 	ands.w	r5, r5, #6
 8004608:	d106      	bne.n	8004618 <_printf_common+0x48>
 800460a:	f104 0a19 	add.w	sl, r4, #25
 800460e:	68e3      	ldr	r3, [r4, #12]
 8004610:	6832      	ldr	r2, [r6, #0]
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	42ab      	cmp	r3, r5
 8004616:	dc26      	bgt.n	8004666 <_printf_common+0x96>
 8004618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800461c:	1e13      	subs	r3, r2, #0
 800461e:	6822      	ldr	r2, [r4, #0]
 8004620:	bf18      	it	ne
 8004622:	2301      	movne	r3, #1
 8004624:	0692      	lsls	r2, r2, #26
 8004626:	d42b      	bmi.n	8004680 <_printf_common+0xb0>
 8004628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800462c:	4649      	mov	r1, r9
 800462e:	4638      	mov	r0, r7
 8004630:	47c0      	blx	r8
 8004632:	3001      	adds	r0, #1
 8004634:	d01e      	beq.n	8004674 <_printf_common+0xa4>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	6922      	ldr	r2, [r4, #16]
 800463a:	f003 0306 	and.w	r3, r3, #6
 800463e:	2b04      	cmp	r3, #4
 8004640:	bf02      	ittt	eq
 8004642:	68e5      	ldreq	r5, [r4, #12]
 8004644:	6833      	ldreq	r3, [r6, #0]
 8004646:	1aed      	subeq	r5, r5, r3
 8004648:	68a3      	ldr	r3, [r4, #8]
 800464a:	bf0c      	ite	eq
 800464c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004650:	2500      	movne	r5, #0
 8004652:	4293      	cmp	r3, r2
 8004654:	bfc4      	itt	gt
 8004656:	1a9b      	subgt	r3, r3, r2
 8004658:	18ed      	addgt	r5, r5, r3
 800465a:	2600      	movs	r6, #0
 800465c:	341a      	adds	r4, #26
 800465e:	42b5      	cmp	r5, r6
 8004660:	d11a      	bne.n	8004698 <_printf_common+0xc8>
 8004662:	2000      	movs	r0, #0
 8004664:	e008      	b.n	8004678 <_printf_common+0xa8>
 8004666:	2301      	movs	r3, #1
 8004668:	4652      	mov	r2, sl
 800466a:	4649      	mov	r1, r9
 800466c:	4638      	mov	r0, r7
 800466e:	47c0      	blx	r8
 8004670:	3001      	adds	r0, #1
 8004672:	d103      	bne.n	800467c <_printf_common+0xac>
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467c:	3501      	adds	r5, #1
 800467e:	e7c6      	b.n	800460e <_printf_common+0x3e>
 8004680:	18e1      	adds	r1, r4, r3
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	2030      	movs	r0, #48	; 0x30
 8004686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800468a:	4422      	add	r2, r4
 800468c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004694:	3302      	adds	r3, #2
 8004696:	e7c7      	b.n	8004628 <_printf_common+0x58>
 8004698:	2301      	movs	r3, #1
 800469a:	4622      	mov	r2, r4
 800469c:	4649      	mov	r1, r9
 800469e:	4638      	mov	r0, r7
 80046a0:	47c0      	blx	r8
 80046a2:	3001      	adds	r0, #1
 80046a4:	d0e6      	beq.n	8004674 <_printf_common+0xa4>
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7d9      	b.n	800465e <_printf_common+0x8e>
	...

080046ac <_printf_i>:
 80046ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	7e0f      	ldrb	r7, [r1, #24]
 80046b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046b4:	2f78      	cmp	r7, #120	; 0x78
 80046b6:	4691      	mov	r9, r2
 80046b8:	4680      	mov	r8, r0
 80046ba:	460c      	mov	r4, r1
 80046bc:	469a      	mov	sl, r3
 80046be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046c2:	d807      	bhi.n	80046d4 <_printf_i+0x28>
 80046c4:	2f62      	cmp	r7, #98	; 0x62
 80046c6:	d80a      	bhi.n	80046de <_printf_i+0x32>
 80046c8:	2f00      	cmp	r7, #0
 80046ca:	f000 80d4 	beq.w	8004876 <_printf_i+0x1ca>
 80046ce:	2f58      	cmp	r7, #88	; 0x58
 80046d0:	f000 80c0 	beq.w	8004854 <_printf_i+0x1a8>
 80046d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046dc:	e03a      	b.n	8004754 <_printf_i+0xa8>
 80046de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046e2:	2b15      	cmp	r3, #21
 80046e4:	d8f6      	bhi.n	80046d4 <_printf_i+0x28>
 80046e6:	a101      	add	r1, pc, #4	; (adr r1, 80046ec <_printf_i+0x40>)
 80046e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046ec:	08004745 	.word	0x08004745
 80046f0:	08004759 	.word	0x08004759
 80046f4:	080046d5 	.word	0x080046d5
 80046f8:	080046d5 	.word	0x080046d5
 80046fc:	080046d5 	.word	0x080046d5
 8004700:	080046d5 	.word	0x080046d5
 8004704:	08004759 	.word	0x08004759
 8004708:	080046d5 	.word	0x080046d5
 800470c:	080046d5 	.word	0x080046d5
 8004710:	080046d5 	.word	0x080046d5
 8004714:	080046d5 	.word	0x080046d5
 8004718:	0800485d 	.word	0x0800485d
 800471c:	08004785 	.word	0x08004785
 8004720:	08004817 	.word	0x08004817
 8004724:	080046d5 	.word	0x080046d5
 8004728:	080046d5 	.word	0x080046d5
 800472c:	0800487f 	.word	0x0800487f
 8004730:	080046d5 	.word	0x080046d5
 8004734:	08004785 	.word	0x08004785
 8004738:	080046d5 	.word	0x080046d5
 800473c:	080046d5 	.word	0x080046d5
 8004740:	0800481f 	.word	0x0800481f
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	1d1a      	adds	r2, r3, #4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	602a      	str	r2, [r5, #0]
 800474c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004754:	2301      	movs	r3, #1
 8004756:	e09f      	b.n	8004898 <_printf_i+0x1ec>
 8004758:	6820      	ldr	r0, [r4, #0]
 800475a:	682b      	ldr	r3, [r5, #0]
 800475c:	0607      	lsls	r7, r0, #24
 800475e:	f103 0104 	add.w	r1, r3, #4
 8004762:	6029      	str	r1, [r5, #0]
 8004764:	d501      	bpl.n	800476a <_printf_i+0xbe>
 8004766:	681e      	ldr	r6, [r3, #0]
 8004768:	e003      	b.n	8004772 <_printf_i+0xc6>
 800476a:	0646      	lsls	r6, r0, #25
 800476c:	d5fb      	bpl.n	8004766 <_printf_i+0xba>
 800476e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004772:	2e00      	cmp	r6, #0
 8004774:	da03      	bge.n	800477e <_printf_i+0xd2>
 8004776:	232d      	movs	r3, #45	; 0x2d
 8004778:	4276      	negs	r6, r6
 800477a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477e:	485a      	ldr	r0, [pc, #360]	; (80048e8 <_printf_i+0x23c>)
 8004780:	230a      	movs	r3, #10
 8004782:	e012      	b.n	80047aa <_printf_i+0xfe>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	6820      	ldr	r0, [r4, #0]
 8004788:	1d19      	adds	r1, r3, #4
 800478a:	6029      	str	r1, [r5, #0]
 800478c:	0605      	lsls	r5, r0, #24
 800478e:	d501      	bpl.n	8004794 <_printf_i+0xe8>
 8004790:	681e      	ldr	r6, [r3, #0]
 8004792:	e002      	b.n	800479a <_printf_i+0xee>
 8004794:	0641      	lsls	r1, r0, #25
 8004796:	d5fb      	bpl.n	8004790 <_printf_i+0xe4>
 8004798:	881e      	ldrh	r6, [r3, #0]
 800479a:	4853      	ldr	r0, [pc, #332]	; (80048e8 <_printf_i+0x23c>)
 800479c:	2f6f      	cmp	r7, #111	; 0x6f
 800479e:	bf0c      	ite	eq
 80047a0:	2308      	moveq	r3, #8
 80047a2:	230a      	movne	r3, #10
 80047a4:	2100      	movs	r1, #0
 80047a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047aa:	6865      	ldr	r5, [r4, #4]
 80047ac:	60a5      	str	r5, [r4, #8]
 80047ae:	2d00      	cmp	r5, #0
 80047b0:	bfa2      	ittt	ge
 80047b2:	6821      	ldrge	r1, [r4, #0]
 80047b4:	f021 0104 	bicge.w	r1, r1, #4
 80047b8:	6021      	strge	r1, [r4, #0]
 80047ba:	b90e      	cbnz	r6, 80047c0 <_printf_i+0x114>
 80047bc:	2d00      	cmp	r5, #0
 80047be:	d04b      	beq.n	8004858 <_printf_i+0x1ac>
 80047c0:	4615      	mov	r5, r2
 80047c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80047c6:	fb03 6711 	mls	r7, r3, r1, r6
 80047ca:	5dc7      	ldrb	r7, [r0, r7]
 80047cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047d0:	4637      	mov	r7, r6
 80047d2:	42bb      	cmp	r3, r7
 80047d4:	460e      	mov	r6, r1
 80047d6:	d9f4      	bls.n	80047c2 <_printf_i+0x116>
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d10b      	bne.n	80047f4 <_printf_i+0x148>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	07de      	lsls	r6, r3, #31
 80047e0:	d508      	bpl.n	80047f4 <_printf_i+0x148>
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	6861      	ldr	r1, [r4, #4]
 80047e6:	4299      	cmp	r1, r3
 80047e8:	bfde      	ittt	le
 80047ea:	2330      	movle	r3, #48	; 0x30
 80047ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047f4:	1b52      	subs	r2, r2, r5
 80047f6:	6122      	str	r2, [r4, #16]
 80047f8:	f8cd a000 	str.w	sl, [sp]
 80047fc:	464b      	mov	r3, r9
 80047fe:	aa03      	add	r2, sp, #12
 8004800:	4621      	mov	r1, r4
 8004802:	4640      	mov	r0, r8
 8004804:	f7ff fee4 	bl	80045d0 <_printf_common>
 8004808:	3001      	adds	r0, #1
 800480a:	d14a      	bne.n	80048a2 <_printf_i+0x1f6>
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	b004      	add	sp, #16
 8004812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	f043 0320 	orr.w	r3, r3, #32
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	4833      	ldr	r0, [pc, #204]	; (80048ec <_printf_i+0x240>)
 8004820:	2778      	movs	r7, #120	; 0x78
 8004822:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	6829      	ldr	r1, [r5, #0]
 800482a:	061f      	lsls	r7, r3, #24
 800482c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004830:	d402      	bmi.n	8004838 <_printf_i+0x18c>
 8004832:	065f      	lsls	r7, r3, #25
 8004834:	bf48      	it	mi
 8004836:	b2b6      	uxthmi	r6, r6
 8004838:	07df      	lsls	r7, r3, #31
 800483a:	bf48      	it	mi
 800483c:	f043 0320 	orrmi.w	r3, r3, #32
 8004840:	6029      	str	r1, [r5, #0]
 8004842:	bf48      	it	mi
 8004844:	6023      	strmi	r3, [r4, #0]
 8004846:	b91e      	cbnz	r6, 8004850 <_printf_i+0x1a4>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	f023 0320 	bic.w	r3, r3, #32
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	2310      	movs	r3, #16
 8004852:	e7a7      	b.n	80047a4 <_printf_i+0xf8>
 8004854:	4824      	ldr	r0, [pc, #144]	; (80048e8 <_printf_i+0x23c>)
 8004856:	e7e4      	b.n	8004822 <_printf_i+0x176>
 8004858:	4615      	mov	r5, r2
 800485a:	e7bd      	b.n	80047d8 <_printf_i+0x12c>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	6826      	ldr	r6, [r4, #0]
 8004860:	6961      	ldr	r1, [r4, #20]
 8004862:	1d18      	adds	r0, r3, #4
 8004864:	6028      	str	r0, [r5, #0]
 8004866:	0635      	lsls	r5, r6, #24
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	d501      	bpl.n	8004870 <_printf_i+0x1c4>
 800486c:	6019      	str	r1, [r3, #0]
 800486e:	e002      	b.n	8004876 <_printf_i+0x1ca>
 8004870:	0670      	lsls	r0, r6, #25
 8004872:	d5fb      	bpl.n	800486c <_printf_i+0x1c0>
 8004874:	8019      	strh	r1, [r3, #0]
 8004876:	2300      	movs	r3, #0
 8004878:	6123      	str	r3, [r4, #16]
 800487a:	4615      	mov	r5, r2
 800487c:	e7bc      	b.n	80047f8 <_printf_i+0x14c>
 800487e:	682b      	ldr	r3, [r5, #0]
 8004880:	1d1a      	adds	r2, r3, #4
 8004882:	602a      	str	r2, [r5, #0]
 8004884:	681d      	ldr	r5, [r3, #0]
 8004886:	6862      	ldr	r2, [r4, #4]
 8004888:	2100      	movs	r1, #0
 800488a:	4628      	mov	r0, r5
 800488c:	f7fb fca8 	bl	80001e0 <memchr>
 8004890:	b108      	cbz	r0, 8004896 <_printf_i+0x1ea>
 8004892:	1b40      	subs	r0, r0, r5
 8004894:	6060      	str	r0, [r4, #4]
 8004896:	6863      	ldr	r3, [r4, #4]
 8004898:	6123      	str	r3, [r4, #16]
 800489a:	2300      	movs	r3, #0
 800489c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a0:	e7aa      	b.n	80047f8 <_printf_i+0x14c>
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	462a      	mov	r2, r5
 80048a6:	4649      	mov	r1, r9
 80048a8:	4640      	mov	r0, r8
 80048aa:	47d0      	blx	sl
 80048ac:	3001      	adds	r0, #1
 80048ae:	d0ad      	beq.n	800480c <_printf_i+0x160>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	079b      	lsls	r3, r3, #30
 80048b4:	d413      	bmi.n	80048de <_printf_i+0x232>
 80048b6:	68e0      	ldr	r0, [r4, #12]
 80048b8:	9b03      	ldr	r3, [sp, #12]
 80048ba:	4298      	cmp	r0, r3
 80048bc:	bfb8      	it	lt
 80048be:	4618      	movlt	r0, r3
 80048c0:	e7a6      	b.n	8004810 <_printf_i+0x164>
 80048c2:	2301      	movs	r3, #1
 80048c4:	4632      	mov	r2, r6
 80048c6:	4649      	mov	r1, r9
 80048c8:	4640      	mov	r0, r8
 80048ca:	47d0      	blx	sl
 80048cc:	3001      	adds	r0, #1
 80048ce:	d09d      	beq.n	800480c <_printf_i+0x160>
 80048d0:	3501      	adds	r5, #1
 80048d2:	68e3      	ldr	r3, [r4, #12]
 80048d4:	9903      	ldr	r1, [sp, #12]
 80048d6:	1a5b      	subs	r3, r3, r1
 80048d8:	42ab      	cmp	r3, r5
 80048da:	dcf2      	bgt.n	80048c2 <_printf_i+0x216>
 80048dc:	e7eb      	b.n	80048b6 <_printf_i+0x20a>
 80048de:	2500      	movs	r5, #0
 80048e0:	f104 0619 	add.w	r6, r4, #25
 80048e4:	e7f5      	b.n	80048d2 <_printf_i+0x226>
 80048e6:	bf00      	nop
 80048e8:	08004a25 	.word	0x08004a25
 80048ec:	08004a36 	.word	0x08004a36

080048f0 <memmove>:
 80048f0:	4288      	cmp	r0, r1
 80048f2:	b510      	push	{r4, lr}
 80048f4:	eb01 0402 	add.w	r4, r1, r2
 80048f8:	d902      	bls.n	8004900 <memmove+0x10>
 80048fa:	4284      	cmp	r4, r0
 80048fc:	4623      	mov	r3, r4
 80048fe:	d807      	bhi.n	8004910 <memmove+0x20>
 8004900:	1e43      	subs	r3, r0, #1
 8004902:	42a1      	cmp	r1, r4
 8004904:	d008      	beq.n	8004918 <memmove+0x28>
 8004906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800490a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800490e:	e7f8      	b.n	8004902 <memmove+0x12>
 8004910:	4402      	add	r2, r0
 8004912:	4601      	mov	r1, r0
 8004914:	428a      	cmp	r2, r1
 8004916:	d100      	bne.n	800491a <memmove+0x2a>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800491e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004922:	e7f7      	b.n	8004914 <memmove+0x24>

08004924 <_sbrk_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4d06      	ldr	r5, [pc, #24]	; (8004940 <_sbrk_r+0x1c>)
 8004928:	2300      	movs	r3, #0
 800492a:	4604      	mov	r4, r0
 800492c:	4608      	mov	r0, r1
 800492e:	602b      	str	r3, [r5, #0]
 8004930:	f7fc fd96 	bl	8001460 <_sbrk>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_sbrk_r+0x1a>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_sbrk_r+0x1a>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	2000027c 	.word	0x2000027c

08004944 <memcpy>:
 8004944:	440a      	add	r2, r1
 8004946:	4291      	cmp	r1, r2
 8004948:	f100 33ff 	add.w	r3, r0, #4294967295
 800494c:	d100      	bne.n	8004950 <memcpy+0xc>
 800494e:	4770      	bx	lr
 8004950:	b510      	push	{r4, lr}
 8004952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800495a:	4291      	cmp	r1, r2
 800495c:	d1f9      	bne.n	8004952 <memcpy+0xe>
 800495e:	bd10      	pop	{r4, pc}

08004960 <_realloc_r>:
 8004960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004964:	4680      	mov	r8, r0
 8004966:	4614      	mov	r4, r2
 8004968:	460e      	mov	r6, r1
 800496a:	b921      	cbnz	r1, 8004976 <_realloc_r+0x16>
 800496c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004970:	4611      	mov	r1, r2
 8004972:	f7ff bc49 	b.w	8004208 <_malloc_r>
 8004976:	b92a      	cbnz	r2, 8004984 <_realloc_r+0x24>
 8004978:	f7ff fbda 	bl	8004130 <_free_r>
 800497c:	4625      	mov	r5, r4
 800497e:	4628      	mov	r0, r5
 8004980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004984:	f000 f81b 	bl	80049be <_malloc_usable_size_r>
 8004988:	4284      	cmp	r4, r0
 800498a:	4607      	mov	r7, r0
 800498c:	d802      	bhi.n	8004994 <_realloc_r+0x34>
 800498e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004992:	d812      	bhi.n	80049ba <_realloc_r+0x5a>
 8004994:	4621      	mov	r1, r4
 8004996:	4640      	mov	r0, r8
 8004998:	f7ff fc36 	bl	8004208 <_malloc_r>
 800499c:	4605      	mov	r5, r0
 800499e:	2800      	cmp	r0, #0
 80049a0:	d0ed      	beq.n	800497e <_realloc_r+0x1e>
 80049a2:	42bc      	cmp	r4, r7
 80049a4:	4622      	mov	r2, r4
 80049a6:	4631      	mov	r1, r6
 80049a8:	bf28      	it	cs
 80049aa:	463a      	movcs	r2, r7
 80049ac:	f7ff ffca 	bl	8004944 <memcpy>
 80049b0:	4631      	mov	r1, r6
 80049b2:	4640      	mov	r0, r8
 80049b4:	f7ff fbbc 	bl	8004130 <_free_r>
 80049b8:	e7e1      	b.n	800497e <_realloc_r+0x1e>
 80049ba:	4635      	mov	r5, r6
 80049bc:	e7df      	b.n	800497e <_realloc_r+0x1e>

080049be <_malloc_usable_size_r>:
 80049be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c2:	1f18      	subs	r0, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bfbc      	itt	lt
 80049c8:	580b      	ldrlt	r3, [r1, r0]
 80049ca:	18c0      	addlt	r0, r0, r3
 80049cc:	4770      	bx	lr
	...

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr
