
Sensore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005078  08005078  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005078  08005078  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005078  08005078  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000250  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dd39  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c2d  00000000  00000000  0002de08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c00  00000000  00000000  0002fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000096f  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001db89  00000000  00000000  00030fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f732  00000000  00000000  0004eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b680c  00000000  00000000  0005e262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003894  00000000  00000000  00114a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00118304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fd0 	.word	0x08004fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004fd0 	.word	0x08004fd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr
 8000a5c:	0000      	movs	r0, r0
	...

08000a60 <HAL_TIM_IC_CaptureCallback>:
  uint32_t IC_Val2 = 0;
  uint32_t Difference = 0;
  bool Is_First_Captured = false;
  uint8_t Distance = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7f1b      	ldrb	r3, [r3, #28]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d17f      	bne.n	8000b70 <HAL_TIM_IC_CaptureCallback+0x110>
		if(!Is_First_Captured){
 8000a70:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	f083 0301 	eor.w	r3, r3, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d01a      	beq.n	8000ab4 <HAL_TIM_IC_CaptureCallback+0x54>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f002 fe61 	bl	8003748 <HAL_TIM_ReadCapturedValue>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4a3e      	ldr	r2, [pc, #248]	; (8000b84 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000a8a:	6013      	str	r3, [r2, #0]
			Is_First_Captured = true;
 8000a8c:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6a1a      	ldr	r2, [r3, #32]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 020a 	bic.w	r2, r2, #10
 8000aa0:	621a      	str	r2, [r3, #32]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6a1a      	ldr	r2, [r3, #32]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f042 0202 	orr.w	r2, r2, #2
 8000ab0:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}
	}
}
 8000ab2:	e05d      	b.n	8000b70 <HAL_TIM_IC_CaptureCallback+0x110>
		else if(Is_First_Captured){
 8000ab4:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d059      	beq.n	8000b70 <HAL_TIM_IC_CaptureCallback+0x110>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000abc:	2100      	movs	r1, #0
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f002 fe42 	bl	8003748 <HAL_TIM_ReadCapturedValue>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a30      	ldr	r2, [pc, #192]	; (8000b88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ac8:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
			if(IC_Val2 > IC_Val1){
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d907      	bls.n	8000aee <HAL_TIM_IC_CaptureCallback+0x8e>
				Difference = IC_Val2 - IC_Val1;
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e009      	b.n	8000b02 <HAL_TIM_IC_CaptureCallback+0xa2>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000afc:	33ff      	adds	r3, #255	; 0xff
 8000afe:	4a23      	ldr	r2, [pc, #140]	; (8000b8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b00:	6013      	str	r3, [r2, #0]
			Distance = Difference*.034/2;
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fcfc 	bl	8000504 <__aeabi_ui2d>
 8000b0c:	a31a      	add	r3, pc, #104	; (adr r3, 8000b78 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b12:	f7ff fd71 	bl	80005f8 <__aeabi_dmul>
 8000b16:	4602      	mov	r2, r0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b26:	f7ff fe91 	bl	800084c <__aeabi_ddiv>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4619      	mov	r1, r3
 8000b32:	f7ff ff73 	bl	8000a1c <__aeabi_d2uiz>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000b3c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = false;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6a1a      	ldr	r2, [r3, #32]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 020a 	bic.w	r2, r2, #10
 8000b52:	621a      	str	r2, [r3, #32]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6a12      	ldr	r2, [r2, #32]
 8000b5e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 0202 	bic.w	r2, r2, #2
 8000b6e:	60da      	str	r2, [r3, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	b020c49c 	.word	0xb020c49c
 8000b7c:	3fa16872 	.word	0x3fa16872
 8000b80:	20000158 	.word	0x20000158
 8000b84:	2000014c 	.word	0x2000014c
 8000b88:	20000150 	.word	0x20000150
 8000b8c:	20000154 	.word	0x20000154
 8000b90:	20000159 	.word	0x20000159

08000b94 <HCSR04_Read>:

void HCSR04_Read(TIM_HandleTypeDef *htim){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); //alimento il segnale verso il trigger del sensore
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <HCSR04_Read+0x40>)
 8000ba4:	f000 fe3e 	bl	8001824 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ba8:	200a      	movs	r0, #10
 8000baa:	f000 fb8b 	bl	80012c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <HCSR04_Read+0x40>)
 8000bb6:	f000 fe35 	bl	8001824 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f042 0202 	orr.w	r2, r2, #2
 8000bc8:	60da      	str	r2, [r3, #12]
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b09a      	sub	sp, #104	; 0x68
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fb0b 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f853 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 f939 	bl	8000e5c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bea:	f000 f8ad 	bl	8000d48 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000bee:	f000 f905 	bl	8000dfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	481f      	ldr	r0, [pc, #124]	; (8000c74 <main+0x9c>)
 8000bf6:	f002 faa9 	bl	800314c <HAL_TIM_IC_Start_IT>
  HAL_UART_Transmit(&huart2, "Brav o scem\n\r", 19, 0xFFFF);
 8000bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bfe:	2213      	movs	r2, #19
 8000c00:	491d      	ldr	r1, [pc, #116]	; (8000c78 <main+0xa0>)
 8000c02:	481e      	ldr	r0, [pc, #120]	; (8000c7c <main+0xa4>)
 8000c04:	f003 f8cc 	bl	8003da0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read(&htim1);
 8000c08:	481a      	ldr	r0, [pc, #104]	; (8000c74 <main+0x9c>)
 8000c0a:	f7ff ffc3 	bl	8000b94 <HCSR04_Read>
      HAL_Delay(500);
 8000c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c12:	f000 fb57 	bl	80012c4 <HAL_Delay>
      char msg[100] = {'\0'};
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2260      	movs	r2, #96	; 0x60
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fd50 	bl	80046c8 <memset>
      sprintf(&msg, "Distance: %dcm\r\n", Distance);
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <main+0xa8>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4914      	ldr	r1, [pc, #80]	; (8000c84 <main+0xac>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fd28 	bl	8004688 <siprintf>

      if(Distance < 20){
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <main+0xa8>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b13      	cmp	r3, #19
 8000c3e:	d806      	bhi.n	8000c4e <main+0x76>
    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c46:	4810      	ldr	r0, [pc, #64]	; (8000c88 <main+0xb0>)
 8000c48:	f000 fdec 	bl	8001824 <HAL_GPIO_WritePin>
 8000c4c:	e005      	b.n	8000c5a <main+0x82>
      } else {
    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <main+0xb0>)
 8000c56:	f000 fde5 	bl	8001824 <HAL_GPIO_WritePin>
      }
      HAL_UART_Transmit(&huart2, (uint8_t*)&msg, strlen(msg), 0xFFFF);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fab7 	bl	80001d0 <strlen>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	1d39      	adds	r1, r7, #4
 8000c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <main+0xa4>)
 8000c6e:	f003 f897 	bl	8003da0 <HAL_UART_Transmit>
  {
 8000c72:	e7c9      	b.n	8000c08 <main+0x30>
 8000c74:	20000078 	.word	0x20000078
 8000c78:	08004fe8 	.word	0x08004fe8
 8000c7c:	200000c4 	.word	0x200000c4
 8000c80:	20000159 	.word	0x20000159
 8000c84:	08004ff8 	.word	0x08004ff8
 8000c88:	48001000 	.word	0x48001000

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09e      	sub	sp, #120	; 0x78
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c96:	2228      	movs	r2, #40	; 0x28
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fd14 	bl	80046c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	223c      	movs	r2, #60	; 0x3c
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 fd06 	bl	80046c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cd8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cdc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fdb6 	bl	8001854 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cee:	f000 f925 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fdde 	bl	80028d0 <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d1a:	f000 f90f 	bl	8000f3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 8000d1e:	f241 0302 	movw	r3, #4098	; 0x1002
 8000d22:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 f804 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d3a:	f000 f8ff 	bl	8000f3c <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3778      	adds	r7, #120	; 0x78
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000d68:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <MX_TIM1_Init+0xb0>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000d6e:	2247      	movs	r2, #71	; 0x47
 8000d70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d92:	4818      	ldr	r0, [pc, #96]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000d94:	f002 f982 	bl	800309c <HAL_TIM_IC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d9e:	f000 f8cd 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	480f      	ldr	r0, [pc, #60]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000db6:	f002 ff07 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000dc0:	f000 f8bc 	bl	8000f3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <MX_TIM1_Init+0xac>)
 8000ddc:	f002 fc17 	bl	800360e <HAL_TIM_IC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000de6:	f000 f8a9 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000078 	.word	0x20000078
 8000df8:	40012c00 	.word	0x40012c00

08000dfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e02:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <MX_USART2_UART_Init+0x5c>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e40:	f002 ff60 	bl	8003d04 <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e4a:	f000 f877 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200000c4 	.word	0x200000c4
 8000e58:	40004400 	.word	0x40004400

08000e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000e78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e7c:	6153      	str	r3, [r2, #20]
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a28      	ldr	r2, [pc, #160]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec4:	6153      	str	r3, [r2, #20]
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_GPIO_Init+0xd4>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed8:	4816      	ldr	r0, [pc, #88]	; (8000f34 <MX_GPIO_Init+0xd8>)
 8000eda:	f000 fca3 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_GPIO_Init+0xdc>)
 8000ee6:	f000 fc9d 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	480c      	ldr	r0, [pc, #48]	; (8000f34 <MX_GPIO_Init+0xd8>)
 8000f04:	f000 fb14 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_GPIO_Init+0xdc>)
 8000f22:	f000 fb05 	bl	8001530 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	; 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001000 	.word	0x48001000
 8000f38:	48000400 	.word	0x48000400

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>
	...

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x44>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x44>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x44>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_MspInit+0x44>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_MspInit+0x44>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_MspInit+0x44>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <HAL_TIM_IC_MspInit+0x8c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d130      	bne.n	8001014 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_TIM_IC_MspInit+0x90>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <HAL_TIM_IC_MspInit+0x90>)
 8000fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_TIM_IC_MspInit+0x90>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_TIM_IC_MspInit+0x90>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_TIM_IC_MspInit+0x90>)
 8000fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_TIM_IC_MspInit+0x90>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <HAL_TIM_IC_MspInit+0x94>)
 8001000:	f000 fa96 	bl	8001530 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	201b      	movs	r0, #27
 800100a:	f000 fa5a 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800100e:	201b      	movs	r0, #27
 8001010:	f000 fa73 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40012c00 	.word	0x40012c00
 8001020:	40021000 	.word	0x40021000
 8001024:	48001000 	.word	0x48001000

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_UART_MspInit+0x7c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d128      	bne.n	800109c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_UART_MspInit+0x80>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <HAL_UART_MspInit+0x80>)
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_UART_MspInit+0x80>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_UART_MspInit+0x80>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <HAL_UART_MspInit+0x80>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_UART_MspInit+0x80>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800107a:	230c      	movs	r3, #12
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108a:	2307      	movs	r3, #7
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f000 fa4a 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40004400 	.word	0x40004400
 80010a8:	40021000 	.word	0x40021000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f8c4 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM1_CC_IRQHandler+0x10>)
 8001106:	f002 f963 	bl	80033d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000078 	.word	0x20000078

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f003 fac8 	bl	80046d8 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000a000 	.word	0x2000a000
 8001174:	00000400 	.word	0x00000400
 8001178:	2000015c 	.word	0x2000015c
 800117c:	200002b0 	.word	0x200002b0

08001180 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a8:	f7ff ffea 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	; (80011e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <LoopForever+0xe>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	; (80011f0 <LoopForever+0x16>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f003 fa87 	bl	80046e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011d6:	f7ff fcff 	bl	8000bd8 <main>

080011da <LoopForever>:

LoopForever:
    b LoopForever
 80011da:	e7fe      	b.n	80011da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011e8:	08005080 	.word	0x08005080
  ldr r2, =_sbss
 80011ec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011f0:	200002ac 	.word	0x200002ac

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f94f 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fe98 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f967 	bl	8001516 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f92f 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000160 	.word	0x20000160

080012ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000160 	.word	0x20000160

080012c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff3e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff31 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	e154      	b.n	80017ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8146 	beq.w	80017e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_Init+0x40>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d130      	bne.n	80015d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a6:	2201      	movs	r2, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 0201 	and.w	r2, r3, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d017      	beq.n	800160e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d123      	bne.n	8001662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	6939      	ldr	r1, [r7, #16]
 800165e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0203 	and.w	r2, r3, #3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80a0 	beq.w	80017e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_GPIO_Init+0x2d8>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_GPIO_Init+0x2d8>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_GPIO_Init+0x2d8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016bc:	4a53      	ldr	r2, [pc, #332]	; (800180c <HAL_GPIO_Init+0x2dc>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016e6:	d019      	beq.n	800171c <HAL_GPIO_Init+0x1ec>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a49      	ldr	r2, [pc, #292]	; (8001810 <HAL_GPIO_Init+0x2e0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d013      	beq.n	8001718 <HAL_GPIO_Init+0x1e8>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a48      	ldr	r2, [pc, #288]	; (8001814 <HAL_GPIO_Init+0x2e4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00d      	beq.n	8001714 <HAL_GPIO_Init+0x1e4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a47      	ldr	r2, [pc, #284]	; (8001818 <HAL_GPIO_Init+0x2e8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0x1e0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a46      	ldr	r2, [pc, #280]	; (800181c <HAL_GPIO_Init+0x2ec>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_GPIO_Init+0x1dc>
 8001708:	2304      	movs	r3, #4
 800170a:	e008      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 800170c:	2305      	movs	r3, #5
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001710:	2303      	movs	r3, #3
 8001712:	e004      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001714:	2302      	movs	r3, #2
 8001716:	e002      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 800171c:	2300      	movs	r3, #0
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	f002 0203 	and.w	r2, r2, #3
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	4093      	lsls	r3, r2
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800172e:	4937      	ldr	r1, [pc, #220]	; (800180c <HAL_GPIO_Init+0x2dc>)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001760:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800178a:	4a25      	ldr	r2, [pc, #148]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017de:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f47f aea3 	bne.w	8001540 <HAL_GPIO_Init+0x10>
  }
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	48000400 	.word	0x48000400
 8001814:	48000800 	.word	0x48000800
 8001818:	48000c00 	.word	0x48000c00
 800181c:	48001000 	.word	0x48001000
 8001820:	40010400 	.word	0x40010400

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001840:	e002      	b.n	8001848 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800185a:	af00      	add	r7, sp, #0
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001864:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	f001 b823 	b.w	80028c0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 817d 	beq.w	8001b8a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001890:	4bbc      	ldr	r3, [pc, #752]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b04      	cmp	r3, #4
 800189a:	d00c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800189c:	4bb9      	ldr	r3, [pc, #740]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d15c      	bne.n	8001962 <HAL_RCC_OscConfig+0x10e>
 80018a8:	4bb6      	ldr	r3, [pc, #728]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b4:	d155      	bne.n	8001962 <HAL_RCC_OscConfig+0x10e>
 80018b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d102      	bne.n	80018e8 <HAL_RCC_OscConfig+0x94>
 80018e2:	4ba8      	ldr	r3, [pc, #672]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	e015      	b.n	8001914 <HAL_RCC_OscConfig+0xc0>
 80018e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001900:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001904:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001910:	4b9c      	ldr	r3, [pc, #624]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001918:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800191c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001920:	fa92 f2a2 	rbit	r2, r2
 8001924:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001928:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800192c:	fab2 f282 	clz	r2, r2
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f042 0220 	orr.w	r2, r2, #32
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 811f 	beq.w	8001b88 <HAL_RCC_OscConfig+0x334>
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 8116 	bne.w	8001b88 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	f000 bfaf 	b.w	80028c0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x12e>
 8001974:	4b83      	ldr	r3, [pc, #524]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a82      	ldr	r2, [pc, #520]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e036      	b.n	80019f0 <HAL_RCC_OscConfig+0x19c>
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x158>
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7b      	ldr	r2, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a78      	ldr	r2, [pc, #480]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e021      	b.n	80019f0 <HAL_RCC_OscConfig+0x19c>
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x184>
 80019be:	4b71      	ldr	r3, [pc, #452]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a70      	ldr	r2, [pc, #448]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b6e      	ldr	r3, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a6d      	ldr	r2, [pc, #436]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e00b      	b.n	80019f0 <HAL_RCC_OscConfig+0x19c>
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a69      	ldr	r2, [pc, #420]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a66      	ldr	r2, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019f0:	4b64      	ldr	r3, [pc, #400]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	f023 020f 	bic.w	r2, r3, #15
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	495f      	ldr	r1, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d059      	beq.n	8001ace <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fc47 	bl	80012ac <HAL_GetTick>
 8001a1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fc42 	bl	80012ac <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	d902      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	f000 bf43 	b.w	80028c0 <HAL_RCC_OscConfig+0x106c>
 8001a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a4e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <HAL_RCC_OscConfig+0x218>
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	e015      	b.n	8001a98 <HAL_RCC_OscConfig+0x244>
 8001a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a70:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a88:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a94:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a9c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001aa0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001aa4:	fa92 f2a2 	rbit	r2, r2
 8001aa8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001aac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ab0:	fab2 f282 	clz	r2, r2
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f042 0220 	orr.w	r2, r2, #32
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	f002 021f 	and.w	r2, r2, #31
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ab      	beq.n	8001a24 <HAL_RCC_OscConfig+0x1d0>
 8001acc:	e05d      	b.n	8001b8a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff fbed 	bl	80012ac <HAL_GetTick>
 8001ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fbe8 	bl	80012ac <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	; 0x64
 8001ae6:	d902      	bls.n	8001aee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	f000 bee9 	b.w	80028c0 <HAL_RCC_OscConfig+0x106c>
 8001aee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	095b      	lsrs	r3, r3, #5
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d102      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2cc>
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	e015      	b.n	8001b4c <HAL_RCC_OscConfig+0x2f8>
 8001b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b24:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b38:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_RCC_OscConfig+0x330>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b50:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b54:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b58:	fa92 f2a2 	rbit	r2, r2
 8001b5c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b60:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b64:	fab2 f282 	clz	r2, r2
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f042 0220 	orr.w	r2, r2, #32
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	f002 021f 	and.w	r2, r2, #31
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1ab      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x284>
 8001b80:	e003      	b.n	8001b8a <HAL_RCC_OscConfig+0x336>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 817d 	beq.w	8001e9a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ba0:	4ba6      	ldr	r3, [pc, #664]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00b      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bac:	4ba3      	ldr	r3, [pc, #652]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d172      	bne.n	8001c9e <HAL_RCC_OscConfig+0x44a>
 8001bb8:	4ba0      	ldr	r3, [pc, #640]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d16c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x44a>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bd6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d102      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3a0>
 8001bee:	4b93      	ldr	r3, [pc, #588]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	e013      	b.n	8001c1c <HAL_RCC_OscConfig+0x3c8>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c18:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c22:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c26:	fa92 f2a2 	rbit	r2, r2
 8001c2a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c2e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c32:	fab2 f282 	clz	r2, r2
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f042 0220 	orr.w	r2, r2, #32
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f002 021f 	and.w	r2, r2, #31
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f202 	lsl.w	r2, r1, r2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00a      	beq.n	8001c64 <HAL_RCC_OscConfig+0x410>
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f000 be2e 	b.w	80028c0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b75      	ldr	r3, [pc, #468]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	21f8      	movs	r1, #248	; 0xf8
 8001c7a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c82:	fa91 f1a1 	rbit	r1, r1
 8001c86:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c8a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c8e:	fab1 f181 	clz	r1, r1
 8001c92:	b2c9      	uxtb	r1, r1
 8001c94:	408b      	lsls	r3, r1
 8001c96:	4969      	ldr	r1, [pc, #420]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9c:	e0fd      	b.n	8001e9a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8088 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x56c>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001cc2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2301      	movs	r3, #1
 8001cda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fae6 	bl	80012ac <HAL_GetTick>
 8001ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fae1 	bl	80012ac <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d902      	bls.n	8001cfc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f000 bde2 	b.w	80028c0 <HAL_RCC_OscConfig+0x106c>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4d8>
 8001d26:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	e013      	b.n	8001d54 <HAL_RCC_OscConfig+0x500>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d50:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	2202      	movs	r2, #2
 8001d56:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d5e:	fa92 f2a2 	rbit	r2, r2
 8001d62:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d66:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f042 0220 	orr.w	r2, r2, #32
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f002 021f 	and.w	r2, r2, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0af      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	21f8      	movs	r1, #248	; 0xf8
 8001d9c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001da4:	fa91 f1a1 	rbit	r1, r1
 8001da8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001dac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001db0:	fab1 f181 	clz	r1, r1
 8001db4:	b2c9      	uxtb	r1, r1
 8001db6:	408b      	lsls	r3, r1
 8001db8:	4920      	ldr	r1, [pc, #128]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
 8001dbe:	e06c      	b.n	8001e9a <HAL_RCC_OscConfig+0x646>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001dd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	461a      	mov	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fa5e 	bl	80012ac <HAL_GetTick>
 8001df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df6:	f7ff fa59 	bl	80012ac <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d902      	bls.n	8001e0c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	f000 bd5a 	b.w	80028c0 <HAL_RCC_OscConfig+0x106c>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d104      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5ec>
 8001e36:	4b01      	ldr	r3, [pc, #4]	; (8001e3c <HAL_RCC_OscConfig+0x5e8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e015      	b.n	8001e68 <HAL_RCC_OscConfig+0x614>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e64:	4bc8      	ldr	r3, [pc, #800]	; (8002188 <HAL_RCC_OscConfig+0x934>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e72:	fa92 f2a2 	rbit	r2, r2
 8001e76:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e7e:	fab2 f282 	clz	r2, r2
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f042 0220 	orr.w	r2, r2, #32
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f002 021f 	and.w	r2, r2, #31
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f202 	lsl.w	r2, r1, r2
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ad      	bne.n	8001df6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8110 	beq.w	80020d0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d079      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x760>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	4bab      	ldr	r3, [pc, #684]	; (800218c <HAL_RCC_OscConfig+0x938>)
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff f9df 	bl	80012ac <HAL_GetTick>
 8001eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7ff f9da 	bl	80012ac <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d902      	bls.n	8001f0a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	f000 bcdb 	b.w	80028c0 <HAL_RCC_OscConfig+0x106c>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f24:	2202      	movs	r2, #2
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fa93 f2a3 	rbit	r2, r3
 8001f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f48:	2202      	movs	r2, #2
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fa93 f2a3 	rbit	r2, r3
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f64:	4b88      	ldr	r3, [pc, #544]	; (8002188 <HAL_RCC_OscConfig+0x934>)
 8001f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f70:	2102      	movs	r1, #2
 8001f72:	6019      	str	r1, [r3, #0]
 8001f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	fa93 f1a3 	rbit	r1, r3
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f8a:	6019      	str	r1, [r3, #0]
  return result;
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0a0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x6a0>
 8001fb2:	e08d      	b.n	80020d0 <HAL_RCC_OscConfig+0x87c>
 8001fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fd6:	601a      	str	r2, [r3, #0]
  return result;
 8001fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fdc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fe0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_OscConfig+0x938>)
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f959 	bl	80012ac <HAL_GetTick>
 8001ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff f954 	bl	80012ac <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d902      	bls.n	8002016 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	f000 bc55 	b.w	80028c0 <HAL_RCC_OscConfig+0x106c>
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800201e:	2202      	movs	r2, #2
 8002020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	fa93 f2a3 	rbit	r2, r3
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002042:	2202      	movs	r2, #2
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002080:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_OscConfig+0x934>)
 8002084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800208e:	2102      	movs	r1, #2
 8002090:	6019      	str	r1, [r3, #0]
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fa93 f1a3 	rbit	r1, r3
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020a8:	6019      	str	r1, [r3, #0]
  return result;
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d197      	bne.n	8002000 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 81a1 	beq.w	8002428 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCC_OscConfig+0x934>)
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d116      	bne.n	8002126 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_RCC_OscConfig+0x934>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_RCC_OscConfig+0x934>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002102:	61d3      	str	r3, [r2, #28]
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCC_OscConfig+0x934>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800211e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_RCC_OscConfig+0x93c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11a      	bne.n	8002168 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_RCC_OscConfig+0x93c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a16      	ldr	r2, [pc, #88]	; (8002190 <HAL_RCC_OscConfig+0x93c>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7ff f8b5 	bl	80012ac <HAL_GetTick>
 8002142:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	e009      	b.n	800215c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7ff f8b0 	bl	80012ac <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b64      	cmp	r3, #100	; 0x64
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e3b1      	b.n	80028c0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_RCC_OscConfig+0x93c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ef      	beq.n	8002148 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10d      	bne.n	8002194 <HAL_RCC_OscConfig+0x940>
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_RCC_OscConfig+0x934>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a02      	ldr	r2, [pc, #8]	; (8002188 <HAL_RCC_OscConfig+0x934>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	e03c      	b.n	8002200 <HAL_RCC_OscConfig+0x9ac>
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	10908120 	.word	0x10908120
 8002190:	40007000 	.word	0x40007000
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x96a>
 80021a4:	4bc1      	ldr	r3, [pc, #772]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4ac0      	ldr	r2, [pc, #768]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	4bbe      	ldr	r3, [pc, #760]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4abd      	ldr	r2, [pc, #756]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6213      	str	r3, [r2, #32]
 80021bc:	e020      	b.n	8002200 <HAL_RCC_OscConfig+0x9ac>
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x994>
 80021ce:	4bb7      	ldr	r3, [pc, #732]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4ab6      	ldr	r2, [pc, #728]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	4bb4      	ldr	r3, [pc, #720]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4ab3      	ldr	r2, [pc, #716]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6213      	str	r3, [r2, #32]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0x9ac>
 80021e8:	4bb0      	ldr	r3, [pc, #704]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4aaf      	ldr	r2, [pc, #700]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	6213      	str	r3, [r2, #32]
 80021f4:	4bad      	ldr	r3, [pc, #692]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4aac      	ldr	r2, [pc, #688]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80021fa:	f023 0304 	bic.w	r3, r3, #4
 80021fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8081 	beq.w	8002314 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7ff f84b 	bl	80012ac <HAL_GetTick>
 8002216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7ff f846 	bl	80012ac <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e345      	b.n	80028c0 <HAL_RCC_OscConfig+0x106c>
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800223c:	2202      	movs	r2, #2
 800223e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f2a3 	rbit	r2, r3
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002260:	2202      	movs	r2, #2
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	fa93 f2a3 	rbit	r2, r3
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800227a:	601a      	str	r2, [r3, #0]
  return result;
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002284:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d102      	bne.n	80022a0 <HAL_RCC_OscConfig+0xa4c>
 800229a:	4b84      	ldr	r3, [pc, #528]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	e013      	b.n	80022c8 <HAL_RCC_OscConfig+0xa74>
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	4b79      	ldr	r3, [pc, #484]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022d0:	2102      	movs	r1, #2
 80022d2:	6011      	str	r1, [r2, #0]
 80022d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	fa92 f1a2 	rbit	r1, r2
 80022e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022ea:	6011      	str	r1, [r2, #0]
  return result;
 80022ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	fab2 f282 	clz	r2, r2
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f002 021f 	and.w	r2, r2, #31
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f202 	lsl.w	r2, r1, r2
 800230c:	4013      	ands	r3, r2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d084      	beq.n	800221c <HAL_RCC_OscConfig+0x9c8>
 8002312:	e07f      	b.n	8002414 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7fe ffca 	bl	80012ac <HAL_GetTick>
 8002318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe ffc5 	bl	80012ac <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e2c4      	b.n	80028c0 <HAL_RCC_OscConfig+0x106c>
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800233e:	2202      	movs	r2, #2
 8002340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002362:	2202      	movs	r2, #2
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	fa93 f2a3 	rbit	r2, r3
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800237c:	601a      	str	r2, [r3, #0]
  return result;
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002386:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d102      	bne.n	80023a2 <HAL_RCC_OscConfig+0xb4e>
 800239c:	4b43      	ldr	r3, [pc, #268]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	e013      	b.n	80023ca <HAL_RCC_OscConfig+0xb76>
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023aa:	2202      	movs	r2, #2
 80023ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023d2:	2102      	movs	r1, #2
 80023d4:	6011      	str	r1, [r2, #0]
 80023d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	fa92 f1a2 	rbit	r1, r2
 80023e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023ec:	6011      	str	r1, [r2, #0]
  return result;
 80023ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	fab2 f282 	clz	r2, r2
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f002 021f 	and.w	r2, r2, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d184      	bne.n	800231e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002414:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002418:	2b01      	cmp	r3, #1
 800241a:	d105      	bne.n	8002428 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241c:	4b23      	ldr	r3, [pc, #140]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	4a22      	ldr	r2, [pc, #136]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 8002422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002426:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8242 	beq.w	80028be <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <HAL_RCC_OscConfig+0xc58>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	f000 8213 	beq.w	800286e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b02      	cmp	r3, #2
 8002456:	f040 8162 	bne.w	800271e <HAL_RCC_OscConfig+0xeca>
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800247e:	601a      	str	r2, [r3, #0]
  return result;
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002488:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002494:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	461a      	mov	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe ff04 	bl	80012ac <HAL_GetTick>
 80024a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	e00c      	b.n	80024c4 <HAL_RCC_OscConfig+0xc70>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fefc 	bl	80012ac <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e1fd      	b.n	80028c0 <HAL_RCC_OscConfig+0x106c>
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024e8:	601a      	str	r2, [r3, #0]
  return result;
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d102      	bne.n	800250e <HAL_RCC_OscConfig+0xcba>
 8002508:	4bb0      	ldr	r3, [pc, #704]	; (80027cc <HAL_RCC_OscConfig+0xf78>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e027      	b.n	800255e <HAL_RCC_OscConfig+0xd0a>
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800253c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f2a3 	rbit	r2, r3
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	4b9c      	ldr	r3, [pc, #624]	; (80027cc <HAL_RCC_OscConfig+0xf78>)
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002562:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002566:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800256a:	6011      	str	r1, [r2, #0]
 800256c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002570:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	fa92 f1a2 	rbit	r1, r2
 800257a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800257e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002582:	6011      	str	r1, [r2, #0]
  return result;
 8002584:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002588:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	fab2 f282 	clz	r2, r2
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f042 0220 	orr.w	r2, r2, #32
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f002 021f 	and.w	r2, r2, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d182      	bne.n	80024b0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0xf78>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	430b      	orrs	r3, r1
 80025cc:	497f      	ldr	r1, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0xf78>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f2a3 	rbit	r2, r3
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025f6:	601a      	str	r2, [r3, #0]
  return result;
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002600:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800260c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	461a      	mov	r2, r3
 8002614:	2301      	movs	r3, #1
 8002616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fe48 	bl	80012ac <HAL_GetTick>
 800261c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	e009      	b.n	8002636 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fe43 	bl	80012ac <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e144      	b.n	80028c0 <HAL_RCC_OscConfig+0x106c>
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800263e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	fa93 f2a3 	rbit	r2, r3
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800265a:	601a      	str	r2, [r3, #0]
  return result;
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002664:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_RCC_OscConfig+0xe2c>
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <HAL_RCC_OscConfig+0xf78>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e027      	b.n	80026d0 <HAL_RCC_OscConfig+0xe7c>
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_RCC_OscConfig+0xf78>)
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026dc:	6011      	str	r1, [r2, #0]
 80026de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	fa92 f1a2 	rbit	r1, r2
 80026ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026f0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026f4:	6011      	str	r1, [r2, #0]
  return result;
 80026f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026fa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	fab2 f282 	clz	r2, r2
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f042 0220 	orr.w	r2, r2, #32
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f002 021f 	and.w	r2, r2, #31
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f202 	lsl.w	r2, r1, r2
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d082      	beq.n	8002622 <HAL_RCC_OscConfig+0xdce>
 800271c:	e0cf      	b.n	80028be <HAL_RCC_OscConfig+0x106a>
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002726:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800272a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002742:	601a      	str	r2, [r3, #0]
  return result;
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800274c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fda2 	bl	80012ac <HAL_GetTick>
 8002768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276c:	e009      	b.n	8002782 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe fd9d 	bl	80012ac <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e09e      	b.n	80028c0 <HAL_RCC_OscConfig+0x106c>
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800278a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027a6:	601a      	str	r2, [r3, #0]
  return result;
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d104      	bne.n	80027d0 <HAL_RCC_OscConfig+0xf7c>
 80027c6:	4b01      	ldr	r3, [pc, #4]	; (80027cc <HAL_RCC_OscConfig+0xf78>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e029      	b.n	8002820 <HAL_RCC_OscConfig+0xfcc>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	fa93 f2a3 	rbit	r2, r3
 80027ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_OscConfig+0x1078>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002824:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002828:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800282c:	6011      	str	r1, [r2, #0]
 800282e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002832:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	fa92 f1a2 	rbit	r1, r2
 800283c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002840:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002844:	6011      	str	r1, [r2, #0]
  return result;
 8002846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800284a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	fab2 f282 	clz	r2, r2
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	f002 021f 	and.w	r2, r2, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f202 	lsl.w	r2, r1, r2
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d180      	bne.n	800276e <HAL_RCC_OscConfig+0xf1a>
 800286c:	e027      	b.n	80028be <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e01e      	b.n	80028c0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_OscConfig+0x1078>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800288a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800288e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d10b      	bne.n	80028ba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000

080028d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b09e      	sub	sp, #120	; 0x78
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e162      	b.n	8002bae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b90      	ldr	r3, [pc, #576]	; (8002b2c <HAL_RCC_ClockConfig+0x25c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b8d      	ldr	r3, [pc, #564]	; (8002b2c <HAL_RCC_ClockConfig+0x25c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	498b      	ldr	r1, [pc, #556]	; (8002b2c <HAL_RCC_ClockConfig+0x25c>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b89      	ldr	r3, [pc, #548]	; (8002b2c <HAL_RCC_ClockConfig+0x25c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e14a      	b.n	8002bae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b82      	ldr	r3, [pc, #520]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	497f      	ldr	r1, [pc, #508]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80dc 	beq.w	8002afc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d13c      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xf6>
 800294c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002950:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800295a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d102      	bne.n	8002976 <HAL_RCC_ClockConfig+0xa6>
 8002970:	4b6f      	ldr	r3, [pc, #444]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	e00f      	b.n	8002996 <HAL_RCC_ClockConfig+0xc6>
 8002976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	667b      	str	r3, [r7, #100]	; 0x64
 8002984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002988:	663b      	str	r3, [r7, #96]	; 0x60
 800298a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002992:	4b67      	ldr	r3, [pc, #412]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800299a:	65ba      	str	r2, [r7, #88]	; 0x58
 800299c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800299e:	fa92 f2a2 	rbit	r2, r2
 80029a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029a6:	fab2 f282 	clz	r2, r2
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	f042 0220 	orr.w	r2, r2, #32
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	f002 021f 	and.w	r2, r2, #31
 80029b6:	2101      	movs	r1, #1
 80029b8:	fa01 f202 	lsl.w	r2, r1, r2
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d17b      	bne.n	8002aba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e0f3      	b.n	8002bae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d13c      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x178>
 80029ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d102      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x128>
 80029f2:	4b4f      	ldr	r3, [pc, #316]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	e00f      	b.n	8002a18 <HAL_RCC_ClockConfig+0x148>
 80029f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	647b      	str	r3, [r7, #68]	; 0x44
 8002a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a14:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a28:	fab2 f282 	clz	r2, r2
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f042 0220 	orr.w	r2, r2, #32
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f002 021f 	and.w	r2, r2, #31
 8002a38:	2101      	movs	r1, #1
 8002a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d13a      	bne.n	8002aba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0b2      	b.n	8002bae <HAL_RCC_ClockConfig+0x2de>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d102      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x1a0>
 8002a6a:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	e00d      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1bc>
 8002a70:	2302      	movs	r3, #2
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	61ba      	str	r2, [r7, #24]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	fa92 f2a2 	rbit	r2, r2
 8002a96:	617a      	str	r2, [r7, #20]
  return result;
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	fab2 f282 	clz	r2, r2
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	f042 0220 	orr.w	r2, r2, #32
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f002 021f 	and.w	r2, r2, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e079      	b.n	8002bae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f023 0203 	bic.w	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	491a      	ldr	r1, [pc, #104]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002acc:	f7fe fbee 	bl	80012ac <HAL_GetTick>
 8002ad0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad4:	f7fe fbea 	bl	80012ac <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e061      	b.n	8002bae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 020c 	and.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d1eb      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x25c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d214      	bcs.n	8002b34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_RCC_ClockConfig+0x25c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	4906      	ldr	r1, [pc, #24]	; (8002b2c <HAL_RCC_ClockConfig+0x25c>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_RCC_ClockConfig+0x25c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e040      	b.n	8002bae <HAL_RCC_ClockConfig+0x2de>
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	491a      	ldr	r1, [pc, #104]	; (8002bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5e:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4912      	ldr	r1, [pc, #72]	; (8002bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b72:	f000 f829 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b76:	4601      	mov	r1, r0
 8002b78:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b80:	22f0      	movs	r2, #240	; 0xf0
 8002b82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	fab2 f282 	clz	r2, r2
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	40d3      	lsrs	r3, r2
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x2ec>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <HAL_RCC_ClockConfig+0x2f0>)
 8002ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_RCC_ClockConfig+0x2f4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fb3c 	bl	8001224 <HAL_InitTick>
  
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3778      	adds	r7, #120	; 0x78
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	0800500c 	.word	0x0800500c
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b08b      	sub	sp, #44	; 0x2c
 8002bcc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002be2:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x36>
 8002bf6:	e03c      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf8:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bfa:	623b      	str	r3, [r7, #32]
      break;
 8002bfc:	e03c      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c08:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	fa92 f2a2 	rbit	r2, r2
 8002c10:	607a      	str	r2, [r7, #4]
  return result;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	fab2 f282 	clz	r2, r2
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	40d3      	lsrs	r3, r2
 8002c1c:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c1e:	5cd3      	ldrb	r3, [r2, r3]
 8002c20:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c22:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	fa92 f2a2 	rbit	r2, r2
 8002c34:	60fa      	str	r2, [r7, #12]
  return result;
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	fab2 f282 	clz	r2, r2
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	40d3      	lsrs	r3, r2
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c42:	5cd3      	ldrb	r3, [r2, r3]
 8002c44:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c50:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c60:	e004      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	623b      	str	r3, [r7, #32]
      break;
 8002c70:	e002      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c74:	623b      	str	r3, [r7, #32]
      break;
 8002c76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	372c      	adds	r7, #44	; 0x2c
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	007a1200 	.word	0x007a1200
 8002c90:	08005024 	.word	0x08005024
 8002c94:	08005034 	.word	0x08005034
 8002c98:	003d0900 	.word	0x003d0900

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cba:	f7ff ffef 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cc8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ccc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	fa92 f2a2 	rbit	r2, r2
 8002cd4:	603a      	str	r2, [r7, #0]
  return result;
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	fab2 f282 	clz	r2, r2
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	40d3      	lsrs	r3, r2
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ce2:	5cd3      	ldrb	r3, [r2, r3]
 8002ce4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	0800501c 	.word	0x0800501c

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cfe:	f7ff ffcd 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002d02:	4601      	mov	r1, r0
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d0c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	fa92 f2a2 	rbit	r2, r2
 8002d18:	603a      	str	r2, [r7, #0]
  return result;
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	40d3      	lsrs	r3, r2
 8002d24:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	0800501c 	.word	0x0800501c

08002d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b092      	sub	sp, #72	; 0x48
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80d4 	beq.w	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d60:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10e      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4a4a      	ldr	r2, [pc, #296]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d76:	61d3      	str	r3, [r2, #28]
 8002d78:	4b48      	ldr	r3, [pc, #288]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a41      	ldr	r2, [pc, #260]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fa83 	bl	80012ac <HAL_GetTick>
 8002da6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	e008      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7fe fa7f 	bl	80012ac <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b64      	cmp	r3, #100	; 0x64
 8002db6:	d901      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e169      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dc8:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8084 	beq.w	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d07c      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002de8:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	461a      	mov	r2, r3
 8002e12:	2301      	movs	r3, #1
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	461a      	mov	r2, r3
 8002e36:	2300      	movs	r3, #0
 8002e38:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e3a:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d04b      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fa2f 	bl	80012ac <HAL_GetTick>
 8002e4e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe fa2b 	bl	80012ac <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e113      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	2302      	movs	r3, #2
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e80:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e96:	4b01      	ldr	r3, [pc, #4]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	e00d      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	10908100 	.word	0x10908100
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	4b78      	ldr	r3, [pc, #480]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2202      	movs	r2, #2
 8002eba:	613a      	str	r2, [r7, #16]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	fa92 f2a2 	rbit	r2, r2
 8002ec2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	fab2 f282 	clz	r2, r2
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f002 021f 	and.w	r2, r2, #31
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0b7      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	496a      	ldr	r1, [pc, #424]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ef4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d105      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4a65      	ldr	r2, [pc, #404]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f14:	4b60      	ldr	r3, [pc, #384]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	f023 0203 	bic.w	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	495d      	ldr	r1, [pc, #372]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f32:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4956      	ldr	r1, [pc, #344]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f50:	4b51      	ldr	r3, [pc, #324]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	494e      	ldr	r1, [pc, #312]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f023 0210 	bic.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4947      	ldr	r1, [pc, #284]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f8c:	4b42      	ldr	r3, [pc, #264]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	493f      	ldr	r1, [pc, #252]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f023 0220 	bic.w	r2, r3, #32
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4938      	ldr	r1, [pc, #224]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fc8:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	4930      	ldr	r1, [pc, #192]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fe6:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	4929      	ldr	r1, [pc, #164]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	4921      	ldr	r1, [pc, #132]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	491a      	ldr	r1, [pc, #104]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003040:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	4912      	ldr	r1, [pc, #72]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800304e:	4313      	orrs	r3, r2
 8003050:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	490b      	ldr	r1, [pc, #44]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3748      	adds	r7, #72	; 0x48
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e049      	b.n	8003142 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd ff64 	bl	8000f90 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f000 fba0 	bl	8003820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d104      	bne.n	800316a <HAL_TIM_IC_Start_IT+0x1e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003166:	b2db      	uxtb	r3, r3
 8003168:	e023      	b.n	80031b2 <HAL_TIM_IC_Start_IT+0x66>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b04      	cmp	r3, #4
 800316e:	d104      	bne.n	800317a <HAL_TIM_IC_Start_IT+0x2e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e01b      	b.n	80031b2 <HAL_TIM_IC_Start_IT+0x66>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d104      	bne.n	800318a <HAL_TIM_IC_Start_IT+0x3e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e013      	b.n	80031b2 <HAL_TIM_IC_Start_IT+0x66>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b0c      	cmp	r3, #12
 800318e:	d104      	bne.n	800319a <HAL_TIM_IC_Start_IT+0x4e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e00b      	b.n	80031b2 <HAL_TIM_IC_Start_IT+0x66>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b10      	cmp	r3, #16
 800319e:	d104      	bne.n	80031aa <HAL_TIM_IC_Start_IT+0x5e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	e003      	b.n	80031b2 <HAL_TIM_IC_Start_IT+0x66>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <HAL_TIM_IC_Start_IT+0x78>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e013      	b.n	80031ec <HAL_TIM_IC_Start_IT+0xa0>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d104      	bne.n	80031d4 <HAL_TIM_IC_Start_IT+0x88>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e00b      	b.n	80031ec <HAL_TIM_IC_Start_IT+0xa0>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d104      	bne.n	80031e4 <HAL_TIM_IC_Start_IT+0x98>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e003      	b.n	80031ec <HAL_TIM_IC_Start_IT+0xa0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80031ee:	7bbb      	ldrb	r3, [r7, #14]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d102      	bne.n	80031fa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80031f4:	7b7b      	ldrb	r3, [r7, #13]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d001      	beq.n	80031fe <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0d8      	b.n	80033b0 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_TIM_IC_Start_IT+0xc2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	e023      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x10a>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d104      	bne.n	800321e <HAL_TIM_IC_Start_IT+0xd2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800321c:	e01b      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x10a>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d104      	bne.n	800322e <HAL_TIM_IC_Start_IT+0xe2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800322c:	e013      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x10a>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	d104      	bne.n	800323e <HAL_TIM_IC_Start_IT+0xf2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800323c:	e00b      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x10a>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b10      	cmp	r3, #16
 8003242:	d104      	bne.n	800324e <HAL_TIM_IC_Start_IT+0x102>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324c:	e003      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x10a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_TIM_IC_Start_IT+0x11a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003264:	e013      	b.n	800328e <HAL_TIM_IC_Start_IT+0x142>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Start_IT+0x12a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003274:	e00b      	b.n	800328e <HAL_TIM_IC_Start_IT+0x142>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start_IT+0x13a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003284:	e003      	b.n	800328e <HAL_TIM_IC_Start_IT+0x142>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d841      	bhi.n	8003318 <HAL_TIM_IC_Start_IT+0x1cc>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <HAL_TIM_IC_Start_IT+0x150>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032d1 	.word	0x080032d1
 80032a0:	08003319 	.word	0x08003319
 80032a4:	08003319 	.word	0x08003319
 80032a8:	08003319 	.word	0x08003319
 80032ac:	080032e3 	.word	0x080032e3
 80032b0:	08003319 	.word	0x08003319
 80032b4:	08003319 	.word	0x08003319
 80032b8:	08003319 	.word	0x08003319
 80032bc:	080032f5 	.word	0x080032f5
 80032c0:	08003319 	.word	0x08003319
 80032c4:	08003319 	.word	0x08003319
 80032c8:	08003319 	.word	0x08003319
 80032cc:	08003307 	.word	0x08003307
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0202 	orr.w	r2, r2, #2
 80032de:	60da      	str	r2, [r3, #12]
      break;
 80032e0:	e01d      	b.n	800331e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0204 	orr.w	r2, r2, #4
 80032f0:	60da      	str	r2, [r3, #12]
      break;
 80032f2:	e014      	b.n	800331e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0208 	orr.w	r2, r2, #8
 8003302:	60da      	str	r2, [r3, #12]
      break;
 8003304:	e00b      	b.n	800331e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0210 	orr.w	r2, r2, #16
 8003314:	60da      	str	r2, [r3, #12]
      break;
 8003316:	e002      	b.n	800331e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	bf00      	nop
  }

  if (status == HAL_OK)
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d144      	bne.n	80033ae <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2201      	movs	r2, #1
 800332a:	6839      	ldr	r1, [r7, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fc25 	bl	8003b7c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <HAL_TIM_IC_Start_IT+0x26c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d018      	beq.n	800336e <HAL_TIM_IC_Start_IT+0x222>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003344:	d013      	beq.n	800336e <HAL_TIM_IC_Start_IT+0x222>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <HAL_TIM_IC_Start_IT+0x270>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00e      	beq.n	800336e <HAL_TIM_IC_Start_IT+0x222>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <HAL_TIM_IC_Start_IT+0x274>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_TIM_IC_Start_IT+0x222>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <HAL_TIM_IC_Start_IT+0x278>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIM_IC_Start_IT+0x222>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_TIM_IC_Start_IT+0x27c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d115      	bne.n	800339a <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_TIM_IC_Start_IT+0x280>)
 8003376:	4013      	ands	r3, r2
 8003378:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b06      	cmp	r3, #6
 800337e:	d015      	beq.n	80033ac <HAL_TIM_IC_Start_IT+0x260>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003386:	d011      	beq.n	80033ac <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003398:	e008      	b.n	80033ac <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e000      	b.n	80033ae <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800
 80033c4:	40013400 	.word	0x40013400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	00010007 	.word	0x00010007

080033d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0202 	mvn.w	r2, #2
 80033fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd fb24 	bl	8000a60 <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f9e2 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f9e9 	bl	80037f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b04      	cmp	r3, #4
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0204 	mvn.w	r2, #4
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fafa 	bl	8000a60 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f9b8 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f9bf 	bl	80037f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b08      	cmp	r3, #8
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b08      	cmp	r3, #8
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0208 	mvn.w	r2, #8
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2204      	movs	r2, #4
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fad0 	bl	8000a60 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f98e 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f995 	bl	80037f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d122      	bne.n	8003528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0210 	mvn.w	r2, #16
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2208      	movs	r2, #8
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd faa6 	bl	8000a60 <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f964 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f96b 	bl	80037f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0201 	mvn.w	r2, #1
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f93e 	bl	80037d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d10e      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d107      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fbae 	bl	8003cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358e:	d10e      	bne.n	80035ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d107      	bne.n	80035ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fba1 	bl	8003cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d10e      	bne.n	80035da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d107      	bne.n	80035da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f919 	bl	800380c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d10e      	bne.n	8003606 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d107      	bne.n	8003606 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f06f 0220 	mvn.w	r2, #32
 80035fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fb61 	bl	8003cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003628:	2302      	movs	r3, #2
 800362a:	e088      	b.n	800373e <HAL_TIM_IC_ConfigChannel+0x130>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11b      	bne.n	8003672 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800364a:	f000 f979 	bl	8003940 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 020c 	bic.w	r2, r2, #12
 800365c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6999      	ldr	r1, [r3, #24]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	619a      	str	r2, [r3, #24]
 8003670:	e060      	b.n	8003734 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d11c      	bne.n	80036b2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003688:	f000 f9c2 	bl	8003a10 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800369a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6999      	ldr	r1, [r3, #24]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	619a      	str	r2, [r3, #24]
 80036b0:	e040      	b.n	8003734 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80036c8:	f000 f9df 	bl	8003a8a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 020c 	bic.w	r2, r2, #12
 80036da:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69d9      	ldr	r1, [r3, #28]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	61da      	str	r2, [r3, #28]
 80036ee:	e021      	b.n	8003734 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d11c      	bne.n	8003730 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003706:	f000 f9fc 	bl	8003b02 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003718:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	021a      	lsls	r2, r3, #8
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	61da      	str	r2, [r3, #28]
 800372e:	e001      	b.n	8003734 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800373c:	7dfb      	ldrb	r3, [r7, #23]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d831      	bhi.n	80037c0 <HAL_TIM_ReadCapturedValue+0x78>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_TIM_ReadCapturedValue+0x1c>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003799 	.word	0x08003799
 8003768:	080037c1 	.word	0x080037c1
 800376c:	080037c1 	.word	0x080037c1
 8003770:	080037c1 	.word	0x080037c1
 8003774:	080037a3 	.word	0x080037a3
 8003778:	080037c1 	.word	0x080037c1
 800377c:	080037c1 	.word	0x080037c1
 8003780:	080037c1 	.word	0x080037c1
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037c1 	.word	0x080037c1
 800378c:	080037c1 	.word	0x080037c1
 8003790:	080037c1 	.word	0x080037c1
 8003794:	080037b7 	.word	0x080037b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379e:	60fb      	str	r3, [r7, #12]

      break;
 80037a0:	e00f      	b.n	80037c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	60fb      	str	r3, [r7, #12]

      break;
 80037aa:	e00a      	b.n	80037c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	60fb      	str	r3, [r7, #12]

      break;
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	60fb      	str	r3, [r7, #12]

      break;
 80037be:	e000      	b.n	80037c2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80037c0:	bf00      	nop
  }

  return tmpreg;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <TIM_Base_SetConfig+0x104>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00f      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a39      	ldr	r2, [pc, #228]	; (8003928 <TIM_Base_SetConfig+0x108>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a38      	ldr	r2, [pc, #224]	; (800392c <TIM_Base_SetConfig+0x10c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a37      	ldr	r2, [pc, #220]	; (8003930 <TIM_Base_SetConfig+0x110>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <TIM_Base_SetConfig+0x104>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01b      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003878:	d017      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <TIM_Base_SetConfig+0x108>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a29      	ldr	r2, [pc, #164]	; (800392c <TIM_Base_SetConfig+0x10c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00f      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a28      	ldr	r2, [pc, #160]	; (8003930 <TIM_Base_SetConfig+0x110>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00b      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <TIM_Base_SetConfig+0x114>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a26      	ldr	r2, [pc, #152]	; (8003938 <TIM_Base_SetConfig+0x118>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a25      	ldr	r2, [pc, #148]	; (800393c <TIM_Base_SetConfig+0x11c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d108      	bne.n	80038bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <TIM_Base_SetConfig+0x104>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00f      	beq.n	8003908 <TIM_Base_SetConfig+0xe8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <TIM_Base_SetConfig+0x110>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00b      	beq.n	8003908 <TIM_Base_SetConfig+0xe8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <TIM_Base_SetConfig+0x114>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <TIM_Base_SetConfig+0xe8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <TIM_Base_SetConfig+0x118>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_Base_SetConfig+0xe8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a0e      	ldr	r2, [pc, #56]	; (800393c <TIM_Base_SetConfig+0x11c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d103      	bne.n	8003910 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	615a      	str	r2, [r3, #20]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40013400 	.word	0x40013400
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800

08003940 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0201 	bic.w	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a24      	ldr	r2, [pc, #144]	; (80039fc <TIM_TI1_SetConfig+0xbc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <TIM_TI1_SetConfig+0x56>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d00f      	beq.n	8003996 <TIM_TI1_SetConfig+0x56>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <TIM_TI1_SetConfig+0xc0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00b      	beq.n	8003996 <TIM_TI1_SetConfig+0x56>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a20      	ldr	r2, [pc, #128]	; (8003a04 <TIM_TI1_SetConfig+0xc4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <TIM_TI1_SetConfig+0x56>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <TIM_TI1_SetConfig+0xc8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d003      	beq.n	8003996 <TIM_TI1_SetConfig+0x56>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <TIM_TI1_SetConfig+0xcc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <TIM_TI1_SetConfig+0x5a>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <TIM_TI1_SetConfig+0x5c>
 800399a:	2300      	movs	r3, #0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e003      	b.n	80039ba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f023 030a 	bic.w	r3, r3, #10
 80039d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f003 030a 	and.w	r3, r3, #10
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40013400 	.word	0x40013400
 8003a0c:	40014000 	.word	0x40014000

08003a10 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0210 	bic.w	r2, r3, #16
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	031b      	lsls	r3, r3, #12
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b087      	sub	sp, #28
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003ada:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	031b      	lsls	r3, r3, #12
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	031b      	lsls	r3, r3, #12
 8003b5a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2201      	movs	r2, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e063      	b.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d108      	bne.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d018      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c52:	d013      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00e      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10c      	bne.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40013400 	.word	0x40013400
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40014000 	.word	0x40014000

08003cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e040      	b.n	8003d98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd f97e 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2224      	movs	r2, #36	; 0x24
 8003d30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f8b6 	bl	8003eb4 <UART_SetConfig>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e022      	b.n	8003d98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa7e 	bl	800425c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fb05 	bl	80043a0 <UART_CheckIdleState>
 8003d96:	4603      	mov	r3, r0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	; 0x28
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d178      	bne.n	8003eaa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_UART_Transmit+0x24>
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e071      	b.n	8003eac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2221      	movs	r2, #33	; 0x21
 8003dd4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd6:	f7fd fa69 	bl	80012ac <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df4:	d108      	bne.n	8003e08 <HAL_UART_Transmit+0x68>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e003      	b.n	8003e10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e10:	e030      	b.n	8003e74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fb67 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e03c      	b.n	8003eac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	b292      	uxth	r2, r2
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	e008      	b.n	8003e62 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	781a      	ldrb	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	b292      	uxth	r2, r2
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1c8      	bne.n	8003e12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2200      	movs	r2, #0
 8003e88:	2140      	movs	r1, #64	; 0x40
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fb30 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e005      	b.n	8003eac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e000      	b.n	8003eac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ee2:	f023 030c 	bic.w	r3, r3, #12
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	6979      	ldr	r1, [r7, #20]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4aa7      	ldr	r2, [pc, #668]	; (80041cc <UART_SetConfig+0x318>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d120      	bne.n	8003f76 <UART_SetConfig+0xc2>
 8003f34:	4ba6      	ldr	r3, [pc, #664]	; (80041d0 <UART_SetConfig+0x31c>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d817      	bhi.n	8003f70 <UART_SetConfig+0xbc>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0x94>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f65 	.word	0x08003f65
 8003f50:	08003f6b 	.word	0x08003f6b
 8003f54:	08003f5f 	.word	0x08003f5f
 8003f58:	2301      	movs	r3, #1
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e0b5      	b.n	80040ca <UART_SetConfig+0x216>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e0b2      	b.n	80040ca <UART_SetConfig+0x216>
 8003f64:	2304      	movs	r3, #4
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e0af      	b.n	80040ca <UART_SetConfig+0x216>
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e0ac      	b.n	80040ca <UART_SetConfig+0x216>
 8003f70:	2310      	movs	r3, #16
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e0a9      	b.n	80040ca <UART_SetConfig+0x216>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a96      	ldr	r2, [pc, #600]	; (80041d4 <UART_SetConfig+0x320>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d124      	bne.n	8003fca <UART_SetConfig+0x116>
 8003f80:	4b93      	ldr	r3, [pc, #588]	; (80041d0 <UART_SetConfig+0x31c>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f8c:	d011      	beq.n	8003fb2 <UART_SetConfig+0xfe>
 8003f8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f92:	d817      	bhi.n	8003fc4 <UART_SetConfig+0x110>
 8003f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f98:	d011      	beq.n	8003fbe <UART_SetConfig+0x10a>
 8003f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f9e:	d811      	bhi.n	8003fc4 <UART_SetConfig+0x110>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <UART_SetConfig+0xf8>
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d006      	beq.n	8003fb8 <UART_SetConfig+0x104>
 8003faa:	e00b      	b.n	8003fc4 <UART_SetConfig+0x110>
 8003fac:	2300      	movs	r3, #0
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e08b      	b.n	80040ca <UART_SetConfig+0x216>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e088      	b.n	80040ca <UART_SetConfig+0x216>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e085      	b.n	80040ca <UART_SetConfig+0x216>
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e082      	b.n	80040ca <UART_SetConfig+0x216>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e07f      	b.n	80040ca <UART_SetConfig+0x216>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a82      	ldr	r2, [pc, #520]	; (80041d8 <UART_SetConfig+0x324>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d124      	bne.n	800401e <UART_SetConfig+0x16a>
 8003fd4:	4b7e      	ldr	r3, [pc, #504]	; (80041d0 <UART_SetConfig+0x31c>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003fdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fe0:	d011      	beq.n	8004006 <UART_SetConfig+0x152>
 8003fe2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fe6:	d817      	bhi.n	8004018 <UART_SetConfig+0x164>
 8003fe8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fec:	d011      	beq.n	8004012 <UART_SetConfig+0x15e>
 8003fee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ff2:	d811      	bhi.n	8004018 <UART_SetConfig+0x164>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <UART_SetConfig+0x14c>
 8003ff8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ffc:	d006      	beq.n	800400c <UART_SetConfig+0x158>
 8003ffe:	e00b      	b.n	8004018 <UART_SetConfig+0x164>
 8004000:	2300      	movs	r3, #0
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	e061      	b.n	80040ca <UART_SetConfig+0x216>
 8004006:	2302      	movs	r3, #2
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e05e      	b.n	80040ca <UART_SetConfig+0x216>
 800400c:	2304      	movs	r3, #4
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e05b      	b.n	80040ca <UART_SetConfig+0x216>
 8004012:	2308      	movs	r3, #8
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e058      	b.n	80040ca <UART_SetConfig+0x216>
 8004018:	2310      	movs	r3, #16
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e055      	b.n	80040ca <UART_SetConfig+0x216>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6e      	ldr	r2, [pc, #440]	; (80041dc <UART_SetConfig+0x328>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d124      	bne.n	8004072 <UART_SetConfig+0x1be>
 8004028:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <UART_SetConfig+0x31c>)
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004030:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004034:	d011      	beq.n	800405a <UART_SetConfig+0x1a6>
 8004036:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800403a:	d817      	bhi.n	800406c <UART_SetConfig+0x1b8>
 800403c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004040:	d011      	beq.n	8004066 <UART_SetConfig+0x1b2>
 8004042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004046:	d811      	bhi.n	800406c <UART_SetConfig+0x1b8>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <UART_SetConfig+0x1a0>
 800404c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004050:	d006      	beq.n	8004060 <UART_SetConfig+0x1ac>
 8004052:	e00b      	b.n	800406c <UART_SetConfig+0x1b8>
 8004054:	2300      	movs	r3, #0
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e037      	b.n	80040ca <UART_SetConfig+0x216>
 800405a:	2302      	movs	r3, #2
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e034      	b.n	80040ca <UART_SetConfig+0x216>
 8004060:	2304      	movs	r3, #4
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e031      	b.n	80040ca <UART_SetConfig+0x216>
 8004066:	2308      	movs	r3, #8
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e02e      	b.n	80040ca <UART_SetConfig+0x216>
 800406c:	2310      	movs	r3, #16
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e02b      	b.n	80040ca <UART_SetConfig+0x216>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a5a      	ldr	r2, [pc, #360]	; (80041e0 <UART_SetConfig+0x32c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d124      	bne.n	80040c6 <UART_SetConfig+0x212>
 800407c:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <UART_SetConfig+0x31c>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004084:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004088:	d011      	beq.n	80040ae <UART_SetConfig+0x1fa>
 800408a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800408e:	d817      	bhi.n	80040c0 <UART_SetConfig+0x20c>
 8004090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004094:	d011      	beq.n	80040ba <UART_SetConfig+0x206>
 8004096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800409a:	d811      	bhi.n	80040c0 <UART_SetConfig+0x20c>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <UART_SetConfig+0x1f4>
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a4:	d006      	beq.n	80040b4 <UART_SetConfig+0x200>
 80040a6:	e00b      	b.n	80040c0 <UART_SetConfig+0x20c>
 80040a8:	2300      	movs	r3, #0
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e00d      	b.n	80040ca <UART_SetConfig+0x216>
 80040ae:	2302      	movs	r3, #2
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e00a      	b.n	80040ca <UART_SetConfig+0x216>
 80040b4:	2304      	movs	r3, #4
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e007      	b.n	80040ca <UART_SetConfig+0x216>
 80040ba:	2308      	movs	r3, #8
 80040bc:	77fb      	strb	r3, [r7, #31]
 80040be:	e004      	b.n	80040ca <UART_SetConfig+0x216>
 80040c0:	2310      	movs	r3, #16
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e001      	b.n	80040ca <UART_SetConfig+0x216>
 80040c6:	2310      	movs	r3, #16
 80040c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	d15b      	bne.n	800418c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80040d4:	7ffb      	ldrb	r3, [r7, #31]
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d827      	bhi.n	800412a <UART_SetConfig+0x276>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <UART_SetConfig+0x22c>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004105 	.word	0x08004105
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	08004115 	.word	0x08004115
 80040ec:	0800412b 	.word	0x0800412b
 80040f0:	0800411b 	.word	0x0800411b
 80040f4:	0800412b 	.word	0x0800412b
 80040f8:	0800412b 	.word	0x0800412b
 80040fc:	0800412b 	.word	0x0800412b
 8004100:	08004123 	.word	0x08004123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004104:	f7fe fdd6 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004108:	61b8      	str	r0, [r7, #24]
        break;
 800410a:	e013      	b.n	8004134 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800410c:	f7fe fdf4 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8004110:	61b8      	str	r0, [r7, #24]
        break;
 8004112:	e00f      	b.n	8004134 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004114:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <UART_SetConfig+0x330>)
 8004116:	61bb      	str	r3, [r7, #24]
        break;
 8004118:	e00c      	b.n	8004134 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411a:	f7fe fd55 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 800411e:	61b8      	str	r0, [r7, #24]
        break;
 8004120:	e008      	b.n	8004134 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004126:	61bb      	str	r3, [r7, #24]
        break;
 8004128:	e004      	b.n	8004134 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	77bb      	strb	r3, [r7, #30]
        break;
 8004132:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 8082 	beq.w	8004240 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	005a      	lsls	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	441a      	add	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d916      	bls.n	8004186 <UART_SetConfig+0x2d2>
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415e:	d212      	bcs.n	8004186 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f023 030f 	bic.w	r3, r3, #15
 8004168:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	b29b      	uxth	r3, r3
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	b29a      	uxth	r2, r3
 8004176:	89fb      	ldrh	r3, [r7, #14]
 8004178:	4313      	orrs	r3, r2
 800417a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	89fa      	ldrh	r2, [r7, #14]
 8004182:	60da      	str	r2, [r3, #12]
 8004184:	e05c      	b.n	8004240 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	77bb      	strb	r3, [r7, #30]
 800418a:	e059      	b.n	8004240 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800418c:	7ffb      	ldrb	r3, [r7, #31]
 800418e:	2b08      	cmp	r3, #8
 8004190:	d835      	bhi.n	80041fe <UART_SetConfig+0x34a>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <UART_SetConfig+0x2e4>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041c5 	.word	0x080041c5
 80041a0:	080041e9 	.word	0x080041e9
 80041a4:	080041ff 	.word	0x080041ff
 80041a8:	080041ef 	.word	0x080041ef
 80041ac:	080041ff 	.word	0x080041ff
 80041b0:	080041ff 	.word	0x080041ff
 80041b4:	080041ff 	.word	0x080041ff
 80041b8:	080041f7 	.word	0x080041f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041bc:	f7fe fd7a 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 80041c0:	61b8      	str	r0, [r7, #24]
        break;
 80041c2:	e021      	b.n	8004208 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041c4:	f7fe fd98 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 80041c8:	61b8      	str	r0, [r7, #24]
        break;
 80041ca:	e01d      	b.n	8004208 <UART_SetConfig+0x354>
 80041cc:	40013800 	.word	0x40013800
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40004400 	.word	0x40004400
 80041d8:	40004800 	.word	0x40004800
 80041dc:	40004c00 	.word	0x40004c00
 80041e0:	40005000 	.word	0x40005000
 80041e4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <UART_SetConfig+0x3a4>)
 80041ea:	61bb      	str	r3, [r7, #24]
        break;
 80041ec:	e00c      	b.n	8004208 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ee:	f7fe fceb 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 80041f2:	61b8      	str	r0, [r7, #24]
        break;
 80041f4:	e008      	b.n	8004208 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fa:	61bb      	str	r3, [r7, #24]
        break;
 80041fc:	e004      	b.n	8004208 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	77bb      	strb	r3, [r7, #30]
        break;
 8004206:	bf00      	nop
    }

    if (pclk != 0U)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d018      	beq.n	8004240 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	085a      	lsrs	r2, r3, #1
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	441a      	add	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d909      	bls.n	800423c <UART_SetConfig+0x388>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422e:	d205      	bcs.n	800423c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	e001      	b.n	8004240 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800424c:	7fbb      	ldrb	r3, [r7, #30]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	007a1200 	.word	0x007a1200

0800425c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01a      	beq.n	8004372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800435a:	d10a      	bne.n	8004372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]
  }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b098      	sub	sp, #96	; 0x60
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043b0:	f7fc ff7c 	bl	80012ac <HAL_GetTick>
 80043b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d12e      	bne.n	8004422 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043cc:	2200      	movs	r2, #0
 80043ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f88c 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d021      	beq.n	8004422 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f2:	653b      	str	r3, [r7, #80]	; 0x50
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043fc:	647b      	str	r3, [r7, #68]	; 0x44
 80043fe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800440a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e6      	bne.n	80043de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e062      	b.n	80044e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d149      	bne.n	80044c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004438:	2200      	movs	r2, #0
 800443a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f856 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03c      	beq.n	80044c4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	623b      	str	r3, [r7, #32]
   return(result);
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800445e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004468:	633b      	str	r3, [r7, #48]	; 0x30
 800446a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800446e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	60fb      	str	r3, [r7, #12]
   return(result);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800449c:	61fa      	str	r2, [r7, #28]
 800449e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	69b9      	ldr	r1, [r7, #24]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	617b      	str	r3, [r7, #20]
   return(result);
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e011      	b.n	80044e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3758      	adds	r7, #88	; 0x58
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004500:	e049      	b.n	8004596 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d045      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fc fecf 	bl	80012ac <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <UART_WaitOnFlagUntilTimeout+0x30>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e048      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d031      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b08      	cmp	r3, #8
 800453e:	d110      	bne.n	8004562 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2208      	movs	r2, #8
 8004546:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f838 	bl	80045be <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2208      	movs	r2, #8
 8004552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e029      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004570:	d111      	bne.n	8004596 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800457a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f81e 	bl	80045be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e00f      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d0a6      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045be:	b480      	push	{r7}
 80045c0:	b095      	sub	sp, #84	; 0x54
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e4:	643b      	str	r3, [r7, #64]	; 0x40
 80045e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e6      	bne.n	80045c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3308      	adds	r3, #8
 80045fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	61fb      	str	r3, [r7, #28]
   return(result);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e5      	bne.n	80045f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004630:	2b01      	cmp	r3, #1
 8004632:	d118      	bne.n	8004666 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	60bb      	str	r3, [r7, #8]
   return(result);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0310 	bic.w	r3, r3, #16
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6979      	ldr	r1, [r7, #20]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	613b      	str	r3, [r7, #16]
   return(result);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e6      	bne.n	8004634 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	669a      	str	r2, [r3, #104]	; 0x68
}
 800467a:	bf00      	nop
 800467c:	3754      	adds	r7, #84	; 0x54
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <siprintf>:
 8004688:	b40e      	push	{r1, r2, r3}
 800468a:	b500      	push	{lr}
 800468c:	b09c      	sub	sp, #112	; 0x70
 800468e:	ab1d      	add	r3, sp, #116	; 0x74
 8004690:	9002      	str	r0, [sp, #8]
 8004692:	9006      	str	r0, [sp, #24]
 8004694:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004698:	4809      	ldr	r0, [pc, #36]	; (80046c0 <siprintf+0x38>)
 800469a:	9107      	str	r1, [sp, #28]
 800469c:	9104      	str	r1, [sp, #16]
 800469e:	4909      	ldr	r1, [pc, #36]	; (80046c4 <siprintf+0x3c>)
 80046a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046a4:	9105      	str	r1, [sp, #20]
 80046a6:	6800      	ldr	r0, [r0, #0]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	a902      	add	r1, sp, #8
 80046ac:	f000 f992 	bl	80049d4 <_svfiprintf_r>
 80046b0:	9b02      	ldr	r3, [sp, #8]
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	b01c      	add	sp, #112	; 0x70
 80046b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046bc:	b003      	add	sp, #12
 80046be:	4770      	bx	lr
 80046c0:	20000058 	.word	0x20000058
 80046c4:	ffff0208 	.word	0xffff0208

080046c8 <memset>:
 80046c8:	4402      	add	r2, r0
 80046ca:	4603      	mov	r3, r0
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d100      	bne.n	80046d2 <memset+0xa>
 80046d0:	4770      	bx	lr
 80046d2:	f803 1b01 	strb.w	r1, [r3], #1
 80046d6:	e7f9      	b.n	80046cc <memset+0x4>

080046d8 <__errno>:
 80046d8:	4b01      	ldr	r3, [pc, #4]	; (80046e0 <__errno+0x8>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000058 	.word	0x20000058

080046e4 <__libc_init_array>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	4d0d      	ldr	r5, [pc, #52]	; (800471c <__libc_init_array+0x38>)
 80046e8:	4c0d      	ldr	r4, [pc, #52]	; (8004720 <__libc_init_array+0x3c>)
 80046ea:	1b64      	subs	r4, r4, r5
 80046ec:	10a4      	asrs	r4, r4, #2
 80046ee:	2600      	movs	r6, #0
 80046f0:	42a6      	cmp	r6, r4
 80046f2:	d109      	bne.n	8004708 <__libc_init_array+0x24>
 80046f4:	4d0b      	ldr	r5, [pc, #44]	; (8004724 <__libc_init_array+0x40>)
 80046f6:	4c0c      	ldr	r4, [pc, #48]	; (8004728 <__libc_init_array+0x44>)
 80046f8:	f000 fc6a 	bl	8004fd0 <_init>
 80046fc:	1b64      	subs	r4, r4, r5
 80046fe:	10a4      	asrs	r4, r4, #2
 8004700:	2600      	movs	r6, #0
 8004702:	42a6      	cmp	r6, r4
 8004704:	d105      	bne.n	8004712 <__libc_init_array+0x2e>
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	f855 3b04 	ldr.w	r3, [r5], #4
 800470c:	4798      	blx	r3
 800470e:	3601      	adds	r6, #1
 8004710:	e7ee      	b.n	80046f0 <__libc_init_array+0xc>
 8004712:	f855 3b04 	ldr.w	r3, [r5], #4
 8004716:	4798      	blx	r3
 8004718:	3601      	adds	r6, #1
 800471a:	e7f2      	b.n	8004702 <__libc_init_array+0x1e>
 800471c:	08005078 	.word	0x08005078
 8004720:	08005078 	.word	0x08005078
 8004724:	08005078 	.word	0x08005078
 8004728:	0800507c 	.word	0x0800507c

0800472c <__retarget_lock_acquire_recursive>:
 800472c:	4770      	bx	lr

0800472e <__retarget_lock_release_recursive>:
 800472e:	4770      	bx	lr

08004730 <_free_r>:
 8004730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004732:	2900      	cmp	r1, #0
 8004734:	d044      	beq.n	80047c0 <_free_r+0x90>
 8004736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473a:	9001      	str	r0, [sp, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f1a1 0404 	sub.w	r4, r1, #4
 8004742:	bfb8      	it	lt
 8004744:	18e4      	addlt	r4, r4, r3
 8004746:	f000 f8df 	bl	8004908 <__malloc_lock>
 800474a:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <_free_r+0x94>)
 800474c:	9801      	ldr	r0, [sp, #4]
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	b933      	cbnz	r3, 8004760 <_free_r+0x30>
 8004752:	6063      	str	r3, [r4, #4]
 8004754:	6014      	str	r4, [r2, #0]
 8004756:	b003      	add	sp, #12
 8004758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800475c:	f000 b8da 	b.w	8004914 <__malloc_unlock>
 8004760:	42a3      	cmp	r3, r4
 8004762:	d908      	bls.n	8004776 <_free_r+0x46>
 8004764:	6825      	ldr	r5, [r4, #0]
 8004766:	1961      	adds	r1, r4, r5
 8004768:	428b      	cmp	r3, r1
 800476a:	bf01      	itttt	eq
 800476c:	6819      	ldreq	r1, [r3, #0]
 800476e:	685b      	ldreq	r3, [r3, #4]
 8004770:	1949      	addeq	r1, r1, r5
 8004772:	6021      	streq	r1, [r4, #0]
 8004774:	e7ed      	b.n	8004752 <_free_r+0x22>
 8004776:	461a      	mov	r2, r3
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b10b      	cbz	r3, 8004780 <_free_r+0x50>
 800477c:	42a3      	cmp	r3, r4
 800477e:	d9fa      	bls.n	8004776 <_free_r+0x46>
 8004780:	6811      	ldr	r1, [r2, #0]
 8004782:	1855      	adds	r5, r2, r1
 8004784:	42a5      	cmp	r5, r4
 8004786:	d10b      	bne.n	80047a0 <_free_r+0x70>
 8004788:	6824      	ldr	r4, [r4, #0]
 800478a:	4421      	add	r1, r4
 800478c:	1854      	adds	r4, r2, r1
 800478e:	42a3      	cmp	r3, r4
 8004790:	6011      	str	r1, [r2, #0]
 8004792:	d1e0      	bne.n	8004756 <_free_r+0x26>
 8004794:	681c      	ldr	r4, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	6053      	str	r3, [r2, #4]
 800479a:	440c      	add	r4, r1
 800479c:	6014      	str	r4, [r2, #0]
 800479e:	e7da      	b.n	8004756 <_free_r+0x26>
 80047a0:	d902      	bls.n	80047a8 <_free_r+0x78>
 80047a2:	230c      	movs	r3, #12
 80047a4:	6003      	str	r3, [r0, #0]
 80047a6:	e7d6      	b.n	8004756 <_free_r+0x26>
 80047a8:	6825      	ldr	r5, [r4, #0]
 80047aa:	1961      	adds	r1, r4, r5
 80047ac:	428b      	cmp	r3, r1
 80047ae:	bf04      	itt	eq
 80047b0:	6819      	ldreq	r1, [r3, #0]
 80047b2:	685b      	ldreq	r3, [r3, #4]
 80047b4:	6063      	str	r3, [r4, #4]
 80047b6:	bf04      	itt	eq
 80047b8:	1949      	addeq	r1, r1, r5
 80047ba:	6021      	streq	r1, [r4, #0]
 80047bc:	6054      	str	r4, [r2, #4]
 80047be:	e7ca      	b.n	8004756 <_free_r+0x26>
 80047c0:	b003      	add	sp, #12
 80047c2:	bd30      	pop	{r4, r5, pc}
 80047c4:	200002a4 	.word	0x200002a4

080047c8 <sbrk_aligned>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	4e0e      	ldr	r6, [pc, #56]	; (8004804 <sbrk_aligned+0x3c>)
 80047cc:	460c      	mov	r4, r1
 80047ce:	6831      	ldr	r1, [r6, #0]
 80047d0:	4605      	mov	r5, r0
 80047d2:	b911      	cbnz	r1, 80047da <sbrk_aligned+0x12>
 80047d4:	f000 fba6 	bl	8004f24 <_sbrk_r>
 80047d8:	6030      	str	r0, [r6, #0]
 80047da:	4621      	mov	r1, r4
 80047dc:	4628      	mov	r0, r5
 80047de:	f000 fba1 	bl	8004f24 <_sbrk_r>
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	d00a      	beq.n	80047fc <sbrk_aligned+0x34>
 80047e6:	1cc4      	adds	r4, r0, #3
 80047e8:	f024 0403 	bic.w	r4, r4, #3
 80047ec:	42a0      	cmp	r0, r4
 80047ee:	d007      	beq.n	8004800 <sbrk_aligned+0x38>
 80047f0:	1a21      	subs	r1, r4, r0
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 fb96 	bl	8004f24 <_sbrk_r>
 80047f8:	3001      	adds	r0, #1
 80047fa:	d101      	bne.n	8004800 <sbrk_aligned+0x38>
 80047fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004800:	4620      	mov	r0, r4
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	200002a8 	.word	0x200002a8

08004808 <_malloc_r>:
 8004808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800480c:	1ccd      	adds	r5, r1, #3
 800480e:	f025 0503 	bic.w	r5, r5, #3
 8004812:	3508      	adds	r5, #8
 8004814:	2d0c      	cmp	r5, #12
 8004816:	bf38      	it	cc
 8004818:	250c      	movcc	r5, #12
 800481a:	2d00      	cmp	r5, #0
 800481c:	4607      	mov	r7, r0
 800481e:	db01      	blt.n	8004824 <_malloc_r+0x1c>
 8004820:	42a9      	cmp	r1, r5
 8004822:	d905      	bls.n	8004830 <_malloc_r+0x28>
 8004824:	230c      	movs	r3, #12
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	2600      	movs	r6, #0
 800482a:	4630      	mov	r0, r6
 800482c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004830:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004904 <_malloc_r+0xfc>
 8004834:	f000 f868 	bl	8004908 <__malloc_lock>
 8004838:	f8d8 3000 	ldr.w	r3, [r8]
 800483c:	461c      	mov	r4, r3
 800483e:	bb5c      	cbnz	r4, 8004898 <_malloc_r+0x90>
 8004840:	4629      	mov	r1, r5
 8004842:	4638      	mov	r0, r7
 8004844:	f7ff ffc0 	bl	80047c8 <sbrk_aligned>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	4604      	mov	r4, r0
 800484c:	d155      	bne.n	80048fa <_malloc_r+0xf2>
 800484e:	f8d8 4000 	ldr.w	r4, [r8]
 8004852:	4626      	mov	r6, r4
 8004854:	2e00      	cmp	r6, #0
 8004856:	d145      	bne.n	80048e4 <_malloc_r+0xdc>
 8004858:	2c00      	cmp	r4, #0
 800485a:	d048      	beq.n	80048ee <_malloc_r+0xe6>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	4631      	mov	r1, r6
 8004860:	4638      	mov	r0, r7
 8004862:	eb04 0903 	add.w	r9, r4, r3
 8004866:	f000 fb5d 	bl	8004f24 <_sbrk_r>
 800486a:	4581      	cmp	r9, r0
 800486c:	d13f      	bne.n	80048ee <_malloc_r+0xe6>
 800486e:	6821      	ldr	r1, [r4, #0]
 8004870:	1a6d      	subs	r5, r5, r1
 8004872:	4629      	mov	r1, r5
 8004874:	4638      	mov	r0, r7
 8004876:	f7ff ffa7 	bl	80047c8 <sbrk_aligned>
 800487a:	3001      	adds	r0, #1
 800487c:	d037      	beq.n	80048ee <_malloc_r+0xe6>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	442b      	add	r3, r5
 8004882:	6023      	str	r3, [r4, #0]
 8004884:	f8d8 3000 	ldr.w	r3, [r8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d038      	beq.n	80048fe <_malloc_r+0xf6>
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	42a2      	cmp	r2, r4
 8004890:	d12b      	bne.n	80048ea <_malloc_r+0xe2>
 8004892:	2200      	movs	r2, #0
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	e00f      	b.n	80048b8 <_malloc_r+0xb0>
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	1b52      	subs	r2, r2, r5
 800489c:	d41f      	bmi.n	80048de <_malloc_r+0xd6>
 800489e:	2a0b      	cmp	r2, #11
 80048a0:	d917      	bls.n	80048d2 <_malloc_r+0xca>
 80048a2:	1961      	adds	r1, r4, r5
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	6025      	str	r5, [r4, #0]
 80048a8:	bf18      	it	ne
 80048aa:	6059      	strne	r1, [r3, #4]
 80048ac:	6863      	ldr	r3, [r4, #4]
 80048ae:	bf08      	it	eq
 80048b0:	f8c8 1000 	streq.w	r1, [r8]
 80048b4:	5162      	str	r2, [r4, r5]
 80048b6:	604b      	str	r3, [r1, #4]
 80048b8:	4638      	mov	r0, r7
 80048ba:	f104 060b 	add.w	r6, r4, #11
 80048be:	f000 f829 	bl	8004914 <__malloc_unlock>
 80048c2:	f026 0607 	bic.w	r6, r6, #7
 80048c6:	1d23      	adds	r3, r4, #4
 80048c8:	1af2      	subs	r2, r6, r3
 80048ca:	d0ae      	beq.n	800482a <_malloc_r+0x22>
 80048cc:	1b9b      	subs	r3, r3, r6
 80048ce:	50a3      	str	r3, [r4, r2]
 80048d0:	e7ab      	b.n	800482a <_malloc_r+0x22>
 80048d2:	42a3      	cmp	r3, r4
 80048d4:	6862      	ldr	r2, [r4, #4]
 80048d6:	d1dd      	bne.n	8004894 <_malloc_r+0x8c>
 80048d8:	f8c8 2000 	str.w	r2, [r8]
 80048dc:	e7ec      	b.n	80048b8 <_malloc_r+0xb0>
 80048de:	4623      	mov	r3, r4
 80048e0:	6864      	ldr	r4, [r4, #4]
 80048e2:	e7ac      	b.n	800483e <_malloc_r+0x36>
 80048e4:	4634      	mov	r4, r6
 80048e6:	6876      	ldr	r6, [r6, #4]
 80048e8:	e7b4      	b.n	8004854 <_malloc_r+0x4c>
 80048ea:	4613      	mov	r3, r2
 80048ec:	e7cc      	b.n	8004888 <_malloc_r+0x80>
 80048ee:	230c      	movs	r3, #12
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4638      	mov	r0, r7
 80048f4:	f000 f80e 	bl	8004914 <__malloc_unlock>
 80048f8:	e797      	b.n	800482a <_malloc_r+0x22>
 80048fa:	6025      	str	r5, [r4, #0]
 80048fc:	e7dc      	b.n	80048b8 <_malloc_r+0xb0>
 80048fe:	605b      	str	r3, [r3, #4]
 8004900:	deff      	udf	#255	; 0xff
 8004902:	bf00      	nop
 8004904:	200002a4 	.word	0x200002a4

08004908 <__malloc_lock>:
 8004908:	4801      	ldr	r0, [pc, #4]	; (8004910 <__malloc_lock+0x8>)
 800490a:	f7ff bf0f 	b.w	800472c <__retarget_lock_acquire_recursive>
 800490e:	bf00      	nop
 8004910:	200002a0 	.word	0x200002a0

08004914 <__malloc_unlock>:
 8004914:	4801      	ldr	r0, [pc, #4]	; (800491c <__malloc_unlock+0x8>)
 8004916:	f7ff bf0a 	b.w	800472e <__retarget_lock_release_recursive>
 800491a:	bf00      	nop
 800491c:	200002a0 	.word	0x200002a0

08004920 <__ssputs_r>:
 8004920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	688e      	ldr	r6, [r1, #8]
 8004926:	461f      	mov	r7, r3
 8004928:	42be      	cmp	r6, r7
 800492a:	680b      	ldr	r3, [r1, #0]
 800492c:	4682      	mov	sl, r0
 800492e:	460c      	mov	r4, r1
 8004930:	4690      	mov	r8, r2
 8004932:	d82c      	bhi.n	800498e <__ssputs_r+0x6e>
 8004934:	898a      	ldrh	r2, [r1, #12]
 8004936:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800493a:	d026      	beq.n	800498a <__ssputs_r+0x6a>
 800493c:	6965      	ldr	r5, [r4, #20]
 800493e:	6909      	ldr	r1, [r1, #16]
 8004940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004944:	eba3 0901 	sub.w	r9, r3, r1
 8004948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800494c:	1c7b      	adds	r3, r7, #1
 800494e:	444b      	add	r3, r9
 8004950:	106d      	asrs	r5, r5, #1
 8004952:	429d      	cmp	r5, r3
 8004954:	bf38      	it	cc
 8004956:	461d      	movcc	r5, r3
 8004958:	0553      	lsls	r3, r2, #21
 800495a:	d527      	bpl.n	80049ac <__ssputs_r+0x8c>
 800495c:	4629      	mov	r1, r5
 800495e:	f7ff ff53 	bl	8004808 <_malloc_r>
 8004962:	4606      	mov	r6, r0
 8004964:	b360      	cbz	r0, 80049c0 <__ssputs_r+0xa0>
 8004966:	6921      	ldr	r1, [r4, #16]
 8004968:	464a      	mov	r2, r9
 800496a:	f000 faeb 	bl	8004f44 <memcpy>
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	6126      	str	r6, [r4, #16]
 800497c:	6165      	str	r5, [r4, #20]
 800497e:	444e      	add	r6, r9
 8004980:	eba5 0509 	sub.w	r5, r5, r9
 8004984:	6026      	str	r6, [r4, #0]
 8004986:	60a5      	str	r5, [r4, #8]
 8004988:	463e      	mov	r6, r7
 800498a:	42be      	cmp	r6, r7
 800498c:	d900      	bls.n	8004990 <__ssputs_r+0x70>
 800498e:	463e      	mov	r6, r7
 8004990:	6820      	ldr	r0, [r4, #0]
 8004992:	4632      	mov	r2, r6
 8004994:	4641      	mov	r1, r8
 8004996:	f000 faab 	bl	8004ef0 <memmove>
 800499a:	68a3      	ldr	r3, [r4, #8]
 800499c:	1b9b      	subs	r3, r3, r6
 800499e:	60a3      	str	r3, [r4, #8]
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	4433      	add	r3, r6
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	2000      	movs	r0, #0
 80049a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ac:	462a      	mov	r2, r5
 80049ae:	f000 fad7 	bl	8004f60 <_realloc_r>
 80049b2:	4606      	mov	r6, r0
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d1e0      	bne.n	800497a <__ssputs_r+0x5a>
 80049b8:	6921      	ldr	r1, [r4, #16]
 80049ba:	4650      	mov	r0, sl
 80049bc:	f7ff feb8 	bl	8004730 <_free_r>
 80049c0:	230c      	movs	r3, #12
 80049c2:	f8ca 3000 	str.w	r3, [sl]
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	e7e9      	b.n	80049a8 <__ssputs_r+0x88>

080049d4 <_svfiprintf_r>:
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	4698      	mov	r8, r3
 80049da:	898b      	ldrh	r3, [r1, #12]
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	b09d      	sub	sp, #116	; 0x74
 80049e0:	4607      	mov	r7, r0
 80049e2:	460d      	mov	r5, r1
 80049e4:	4614      	mov	r4, r2
 80049e6:	d50e      	bpl.n	8004a06 <_svfiprintf_r+0x32>
 80049e8:	690b      	ldr	r3, [r1, #16]
 80049ea:	b963      	cbnz	r3, 8004a06 <_svfiprintf_r+0x32>
 80049ec:	2140      	movs	r1, #64	; 0x40
 80049ee:	f7ff ff0b 	bl	8004808 <_malloc_r>
 80049f2:	6028      	str	r0, [r5, #0]
 80049f4:	6128      	str	r0, [r5, #16]
 80049f6:	b920      	cbnz	r0, 8004a02 <_svfiprintf_r+0x2e>
 80049f8:	230c      	movs	r3, #12
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	e0d0      	b.n	8004ba4 <_svfiprintf_r+0x1d0>
 8004a02:	2340      	movs	r3, #64	; 0x40
 8004a04:	616b      	str	r3, [r5, #20]
 8004a06:	2300      	movs	r3, #0
 8004a08:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a14:	2330      	movs	r3, #48	; 0x30
 8004a16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bbc <_svfiprintf_r+0x1e8>
 8004a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a1e:	f04f 0901 	mov.w	r9, #1
 8004a22:	4623      	mov	r3, r4
 8004a24:	469a      	mov	sl, r3
 8004a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a2a:	b10a      	cbz	r2, 8004a30 <_svfiprintf_r+0x5c>
 8004a2c:	2a25      	cmp	r2, #37	; 0x25
 8004a2e:	d1f9      	bne.n	8004a24 <_svfiprintf_r+0x50>
 8004a30:	ebba 0b04 	subs.w	fp, sl, r4
 8004a34:	d00b      	beq.n	8004a4e <_svfiprintf_r+0x7a>
 8004a36:	465b      	mov	r3, fp
 8004a38:	4622      	mov	r2, r4
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	f7ff ff6f 	bl	8004920 <__ssputs_r>
 8004a42:	3001      	adds	r0, #1
 8004a44:	f000 80a9 	beq.w	8004b9a <_svfiprintf_r+0x1c6>
 8004a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a4a:	445a      	add	r2, fp
 8004a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80a1 	beq.w	8004b9a <_svfiprintf_r+0x1c6>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a62:	f10a 0a01 	add.w	sl, sl, #1
 8004a66:	9304      	str	r3, [sp, #16]
 8004a68:	9307      	str	r3, [sp, #28]
 8004a6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a6e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a70:	4654      	mov	r4, sl
 8004a72:	2205      	movs	r2, #5
 8004a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a78:	4850      	ldr	r0, [pc, #320]	; (8004bbc <_svfiprintf_r+0x1e8>)
 8004a7a:	f7fb fbb1 	bl	80001e0 <memchr>
 8004a7e:	9a04      	ldr	r2, [sp, #16]
 8004a80:	b9d8      	cbnz	r0, 8004aba <_svfiprintf_r+0xe6>
 8004a82:	06d0      	lsls	r0, r2, #27
 8004a84:	bf44      	itt	mi
 8004a86:	2320      	movmi	r3, #32
 8004a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a8c:	0711      	lsls	r1, r2, #28
 8004a8e:	bf44      	itt	mi
 8004a90:	232b      	movmi	r3, #43	; 0x2b
 8004a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a96:	f89a 3000 	ldrb.w	r3, [sl]
 8004a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9c:	d015      	beq.n	8004aca <_svfiprintf_r+0xf6>
 8004a9e:	9a07      	ldr	r2, [sp, #28]
 8004aa0:	4654      	mov	r4, sl
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f04f 0c0a 	mov.w	ip, #10
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aae:	3b30      	subs	r3, #48	; 0x30
 8004ab0:	2b09      	cmp	r3, #9
 8004ab2:	d94d      	bls.n	8004b50 <_svfiprintf_r+0x17c>
 8004ab4:	b1b0      	cbz	r0, 8004ae4 <_svfiprintf_r+0x110>
 8004ab6:	9207      	str	r2, [sp, #28]
 8004ab8:	e014      	b.n	8004ae4 <_svfiprintf_r+0x110>
 8004aba:	eba0 0308 	sub.w	r3, r0, r8
 8004abe:	fa09 f303 	lsl.w	r3, r9, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	9304      	str	r3, [sp, #16]
 8004ac6:	46a2      	mov	sl, r4
 8004ac8:	e7d2      	b.n	8004a70 <_svfiprintf_r+0x9c>
 8004aca:	9b03      	ldr	r3, [sp, #12]
 8004acc:	1d19      	adds	r1, r3, #4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	9103      	str	r1, [sp, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bfbb      	ittet	lt
 8004ad6:	425b      	neglt	r3, r3
 8004ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8004adc:	9307      	strge	r3, [sp, #28]
 8004ade:	9307      	strlt	r3, [sp, #28]
 8004ae0:	bfb8      	it	lt
 8004ae2:	9204      	strlt	r2, [sp, #16]
 8004ae4:	7823      	ldrb	r3, [r4, #0]
 8004ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ae8:	d10c      	bne.n	8004b04 <_svfiprintf_r+0x130>
 8004aea:	7863      	ldrb	r3, [r4, #1]
 8004aec:	2b2a      	cmp	r3, #42	; 0x2a
 8004aee:	d134      	bne.n	8004b5a <_svfiprintf_r+0x186>
 8004af0:	9b03      	ldr	r3, [sp, #12]
 8004af2:	1d1a      	adds	r2, r3, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	9203      	str	r2, [sp, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bfb8      	it	lt
 8004afc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b00:	3402      	adds	r4, #2
 8004b02:	9305      	str	r3, [sp, #20]
 8004b04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004bcc <_svfiprintf_r+0x1f8>
 8004b08:	7821      	ldrb	r1, [r4, #0]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	4650      	mov	r0, sl
 8004b0e:	f7fb fb67 	bl	80001e0 <memchr>
 8004b12:	b138      	cbz	r0, 8004b24 <_svfiprintf_r+0x150>
 8004b14:	9b04      	ldr	r3, [sp, #16]
 8004b16:	eba0 000a 	sub.w	r0, r0, sl
 8004b1a:	2240      	movs	r2, #64	; 0x40
 8004b1c:	4082      	lsls	r2, r0
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	3401      	adds	r4, #1
 8004b22:	9304      	str	r3, [sp, #16]
 8004b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b28:	4825      	ldr	r0, [pc, #148]	; (8004bc0 <_svfiprintf_r+0x1ec>)
 8004b2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b2e:	2206      	movs	r2, #6
 8004b30:	f7fb fb56 	bl	80001e0 <memchr>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d038      	beq.n	8004baa <_svfiprintf_r+0x1d6>
 8004b38:	4b22      	ldr	r3, [pc, #136]	; (8004bc4 <_svfiprintf_r+0x1f0>)
 8004b3a:	bb1b      	cbnz	r3, 8004b84 <_svfiprintf_r+0x1b0>
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	3307      	adds	r3, #7
 8004b40:	f023 0307 	bic.w	r3, r3, #7
 8004b44:	3308      	adds	r3, #8
 8004b46:	9303      	str	r3, [sp, #12]
 8004b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b4a:	4433      	add	r3, r6
 8004b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4e:	e768      	b.n	8004a22 <_svfiprintf_r+0x4e>
 8004b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b54:	460c      	mov	r4, r1
 8004b56:	2001      	movs	r0, #1
 8004b58:	e7a6      	b.n	8004aa8 <_svfiprintf_r+0xd4>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	3401      	adds	r4, #1
 8004b5e:	9305      	str	r3, [sp, #20]
 8004b60:	4619      	mov	r1, r3
 8004b62:	f04f 0c0a 	mov.w	ip, #10
 8004b66:	4620      	mov	r0, r4
 8004b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b6c:	3a30      	subs	r2, #48	; 0x30
 8004b6e:	2a09      	cmp	r2, #9
 8004b70:	d903      	bls.n	8004b7a <_svfiprintf_r+0x1a6>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0c6      	beq.n	8004b04 <_svfiprintf_r+0x130>
 8004b76:	9105      	str	r1, [sp, #20]
 8004b78:	e7c4      	b.n	8004b04 <_svfiprintf_r+0x130>
 8004b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b7e:	4604      	mov	r4, r0
 8004b80:	2301      	movs	r3, #1
 8004b82:	e7f0      	b.n	8004b66 <_svfiprintf_r+0x192>
 8004b84:	ab03      	add	r3, sp, #12
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	462a      	mov	r2, r5
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <_svfiprintf_r+0x1f4>)
 8004b8c:	a904      	add	r1, sp, #16
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f3af 8000 	nop.w
 8004b94:	1c42      	adds	r2, r0, #1
 8004b96:	4606      	mov	r6, r0
 8004b98:	d1d6      	bne.n	8004b48 <_svfiprintf_r+0x174>
 8004b9a:	89ab      	ldrh	r3, [r5, #12]
 8004b9c:	065b      	lsls	r3, r3, #25
 8004b9e:	f53f af2d 	bmi.w	80049fc <_svfiprintf_r+0x28>
 8004ba2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ba4:	b01d      	add	sp, #116	; 0x74
 8004ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004baa:	ab03      	add	r3, sp, #12
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	462a      	mov	r2, r5
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <_svfiprintf_r+0x1f4>)
 8004bb2:	a904      	add	r1, sp, #16
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f000 f879 	bl	8004cac <_printf_i>
 8004bba:	e7eb      	b.n	8004b94 <_svfiprintf_r+0x1c0>
 8004bbc:	08005044 	.word	0x08005044
 8004bc0:	0800504e 	.word	0x0800504e
 8004bc4:	00000000 	.word	0x00000000
 8004bc8:	08004921 	.word	0x08004921
 8004bcc:	0800504a 	.word	0x0800504a

08004bd0 <_printf_common>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	4699      	mov	r9, r3
 8004bd8:	688a      	ldr	r2, [r1, #8]
 8004bda:	690b      	ldr	r3, [r1, #16]
 8004bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004be0:	4293      	cmp	r3, r2
 8004be2:	bfb8      	it	lt
 8004be4:	4613      	movlt	r3, r2
 8004be6:	6033      	str	r3, [r6, #0]
 8004be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bec:	4607      	mov	r7, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	b10a      	cbz	r2, 8004bf6 <_printf_common+0x26>
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6033      	str	r3, [r6, #0]
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	0699      	lsls	r1, r3, #26
 8004bfa:	bf42      	ittt	mi
 8004bfc:	6833      	ldrmi	r3, [r6, #0]
 8004bfe:	3302      	addmi	r3, #2
 8004c00:	6033      	strmi	r3, [r6, #0]
 8004c02:	6825      	ldr	r5, [r4, #0]
 8004c04:	f015 0506 	ands.w	r5, r5, #6
 8004c08:	d106      	bne.n	8004c18 <_printf_common+0x48>
 8004c0a:	f104 0a19 	add.w	sl, r4, #25
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	6832      	ldr	r2, [r6, #0]
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dc26      	bgt.n	8004c66 <_printf_common+0x96>
 8004c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c1c:	1e13      	subs	r3, r2, #0
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	bf18      	it	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	0692      	lsls	r2, r2, #26
 8004c26:	d42b      	bmi.n	8004c80 <_printf_common+0xb0>
 8004c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4638      	mov	r0, r7
 8004c30:	47c0      	blx	r8
 8004c32:	3001      	adds	r0, #1
 8004c34:	d01e      	beq.n	8004c74 <_printf_common+0xa4>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	6922      	ldr	r2, [r4, #16]
 8004c3a:	f003 0306 	and.w	r3, r3, #6
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	bf02      	ittt	eq
 8004c42:	68e5      	ldreq	r5, [r4, #12]
 8004c44:	6833      	ldreq	r3, [r6, #0]
 8004c46:	1aed      	subeq	r5, r5, r3
 8004c48:	68a3      	ldr	r3, [r4, #8]
 8004c4a:	bf0c      	ite	eq
 8004c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c50:	2500      	movne	r5, #0
 8004c52:	4293      	cmp	r3, r2
 8004c54:	bfc4      	itt	gt
 8004c56:	1a9b      	subgt	r3, r3, r2
 8004c58:	18ed      	addgt	r5, r5, r3
 8004c5a:	2600      	movs	r6, #0
 8004c5c:	341a      	adds	r4, #26
 8004c5e:	42b5      	cmp	r5, r6
 8004c60:	d11a      	bne.n	8004c98 <_printf_common+0xc8>
 8004c62:	2000      	movs	r0, #0
 8004c64:	e008      	b.n	8004c78 <_printf_common+0xa8>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4652      	mov	r2, sl
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	47c0      	blx	r8
 8004c70:	3001      	adds	r0, #1
 8004c72:	d103      	bne.n	8004c7c <_printf_common+0xac>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7c:	3501      	adds	r5, #1
 8004c7e:	e7c6      	b.n	8004c0e <_printf_common+0x3e>
 8004c80:	18e1      	adds	r1, r4, r3
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	2030      	movs	r0, #48	; 0x30
 8004c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c8a:	4422      	add	r2, r4
 8004c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c94:	3302      	adds	r3, #2
 8004c96:	e7c7      	b.n	8004c28 <_printf_common+0x58>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	47c0      	blx	r8
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d0e6      	beq.n	8004c74 <_printf_common+0xa4>
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7d9      	b.n	8004c5e <_printf_common+0x8e>
	...

08004cac <_printf_i>:
 8004cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb0:	7e0f      	ldrb	r7, [r1, #24]
 8004cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cb4:	2f78      	cmp	r7, #120	; 0x78
 8004cb6:	4691      	mov	r9, r2
 8004cb8:	4680      	mov	r8, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	469a      	mov	sl, r3
 8004cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cc2:	d807      	bhi.n	8004cd4 <_printf_i+0x28>
 8004cc4:	2f62      	cmp	r7, #98	; 0x62
 8004cc6:	d80a      	bhi.n	8004cde <_printf_i+0x32>
 8004cc8:	2f00      	cmp	r7, #0
 8004cca:	f000 80d4 	beq.w	8004e76 <_printf_i+0x1ca>
 8004cce:	2f58      	cmp	r7, #88	; 0x58
 8004cd0:	f000 80c0 	beq.w	8004e54 <_printf_i+0x1a8>
 8004cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cdc:	e03a      	b.n	8004d54 <_printf_i+0xa8>
 8004cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ce2:	2b15      	cmp	r3, #21
 8004ce4:	d8f6      	bhi.n	8004cd4 <_printf_i+0x28>
 8004ce6:	a101      	add	r1, pc, #4	; (adr r1, 8004cec <_printf_i+0x40>)
 8004ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cec:	08004d45 	.word	0x08004d45
 8004cf0:	08004d59 	.word	0x08004d59
 8004cf4:	08004cd5 	.word	0x08004cd5
 8004cf8:	08004cd5 	.word	0x08004cd5
 8004cfc:	08004cd5 	.word	0x08004cd5
 8004d00:	08004cd5 	.word	0x08004cd5
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004cd5 	.word	0x08004cd5
 8004d0c:	08004cd5 	.word	0x08004cd5
 8004d10:	08004cd5 	.word	0x08004cd5
 8004d14:	08004cd5 	.word	0x08004cd5
 8004d18:	08004e5d 	.word	0x08004e5d
 8004d1c:	08004d85 	.word	0x08004d85
 8004d20:	08004e17 	.word	0x08004e17
 8004d24:	08004cd5 	.word	0x08004cd5
 8004d28:	08004cd5 	.word	0x08004cd5
 8004d2c:	08004e7f 	.word	0x08004e7f
 8004d30:	08004cd5 	.word	0x08004cd5
 8004d34:	08004d85 	.word	0x08004d85
 8004d38:	08004cd5 	.word	0x08004cd5
 8004d3c:	08004cd5 	.word	0x08004cd5
 8004d40:	08004e1f 	.word	0x08004e1f
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	1d1a      	adds	r2, r3, #4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	602a      	str	r2, [r5, #0]
 8004d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d54:	2301      	movs	r3, #1
 8004d56:	e09f      	b.n	8004e98 <_printf_i+0x1ec>
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	682b      	ldr	r3, [r5, #0]
 8004d5c:	0607      	lsls	r7, r0, #24
 8004d5e:	f103 0104 	add.w	r1, r3, #4
 8004d62:	6029      	str	r1, [r5, #0]
 8004d64:	d501      	bpl.n	8004d6a <_printf_i+0xbe>
 8004d66:	681e      	ldr	r6, [r3, #0]
 8004d68:	e003      	b.n	8004d72 <_printf_i+0xc6>
 8004d6a:	0646      	lsls	r6, r0, #25
 8004d6c:	d5fb      	bpl.n	8004d66 <_printf_i+0xba>
 8004d6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	da03      	bge.n	8004d7e <_printf_i+0xd2>
 8004d76:	232d      	movs	r3, #45	; 0x2d
 8004d78:	4276      	negs	r6, r6
 8004d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d7e:	485a      	ldr	r0, [pc, #360]	; (8004ee8 <_printf_i+0x23c>)
 8004d80:	230a      	movs	r3, #10
 8004d82:	e012      	b.n	8004daa <_printf_i+0xfe>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	6820      	ldr	r0, [r4, #0]
 8004d88:	1d19      	adds	r1, r3, #4
 8004d8a:	6029      	str	r1, [r5, #0]
 8004d8c:	0605      	lsls	r5, r0, #24
 8004d8e:	d501      	bpl.n	8004d94 <_printf_i+0xe8>
 8004d90:	681e      	ldr	r6, [r3, #0]
 8004d92:	e002      	b.n	8004d9a <_printf_i+0xee>
 8004d94:	0641      	lsls	r1, r0, #25
 8004d96:	d5fb      	bpl.n	8004d90 <_printf_i+0xe4>
 8004d98:	881e      	ldrh	r6, [r3, #0]
 8004d9a:	4853      	ldr	r0, [pc, #332]	; (8004ee8 <_printf_i+0x23c>)
 8004d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d9e:	bf0c      	ite	eq
 8004da0:	2308      	moveq	r3, #8
 8004da2:	230a      	movne	r3, #10
 8004da4:	2100      	movs	r1, #0
 8004da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004daa:	6865      	ldr	r5, [r4, #4]
 8004dac:	60a5      	str	r5, [r4, #8]
 8004dae:	2d00      	cmp	r5, #0
 8004db0:	bfa2      	ittt	ge
 8004db2:	6821      	ldrge	r1, [r4, #0]
 8004db4:	f021 0104 	bicge.w	r1, r1, #4
 8004db8:	6021      	strge	r1, [r4, #0]
 8004dba:	b90e      	cbnz	r6, 8004dc0 <_printf_i+0x114>
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	d04b      	beq.n	8004e58 <_printf_i+0x1ac>
 8004dc0:	4615      	mov	r5, r2
 8004dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8004dca:	5dc7      	ldrb	r7, [r0, r7]
 8004dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dd0:	4637      	mov	r7, r6
 8004dd2:	42bb      	cmp	r3, r7
 8004dd4:	460e      	mov	r6, r1
 8004dd6:	d9f4      	bls.n	8004dc2 <_printf_i+0x116>
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d10b      	bne.n	8004df4 <_printf_i+0x148>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	07de      	lsls	r6, r3, #31
 8004de0:	d508      	bpl.n	8004df4 <_printf_i+0x148>
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	6861      	ldr	r1, [r4, #4]
 8004de6:	4299      	cmp	r1, r3
 8004de8:	bfde      	ittt	le
 8004dea:	2330      	movle	r3, #48	; 0x30
 8004dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df4:	1b52      	subs	r2, r2, r5
 8004df6:	6122      	str	r2, [r4, #16]
 8004df8:	f8cd a000 	str.w	sl, [sp]
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	aa03      	add	r2, sp, #12
 8004e00:	4621      	mov	r1, r4
 8004e02:	4640      	mov	r0, r8
 8004e04:	f7ff fee4 	bl	8004bd0 <_printf_common>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d14a      	bne.n	8004ea2 <_printf_i+0x1f6>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	b004      	add	sp, #16
 8004e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	f043 0320 	orr.w	r3, r3, #32
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	4833      	ldr	r0, [pc, #204]	; (8004eec <_printf_i+0x240>)
 8004e20:	2778      	movs	r7, #120	; 0x78
 8004e22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	6829      	ldr	r1, [r5, #0]
 8004e2a:	061f      	lsls	r7, r3, #24
 8004e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e30:	d402      	bmi.n	8004e38 <_printf_i+0x18c>
 8004e32:	065f      	lsls	r7, r3, #25
 8004e34:	bf48      	it	mi
 8004e36:	b2b6      	uxthmi	r6, r6
 8004e38:	07df      	lsls	r7, r3, #31
 8004e3a:	bf48      	it	mi
 8004e3c:	f043 0320 	orrmi.w	r3, r3, #32
 8004e40:	6029      	str	r1, [r5, #0]
 8004e42:	bf48      	it	mi
 8004e44:	6023      	strmi	r3, [r4, #0]
 8004e46:	b91e      	cbnz	r6, 8004e50 <_printf_i+0x1a4>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	f023 0320 	bic.w	r3, r3, #32
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	2310      	movs	r3, #16
 8004e52:	e7a7      	b.n	8004da4 <_printf_i+0xf8>
 8004e54:	4824      	ldr	r0, [pc, #144]	; (8004ee8 <_printf_i+0x23c>)
 8004e56:	e7e4      	b.n	8004e22 <_printf_i+0x176>
 8004e58:	4615      	mov	r5, r2
 8004e5a:	e7bd      	b.n	8004dd8 <_printf_i+0x12c>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	6826      	ldr	r6, [r4, #0]
 8004e60:	6961      	ldr	r1, [r4, #20]
 8004e62:	1d18      	adds	r0, r3, #4
 8004e64:	6028      	str	r0, [r5, #0]
 8004e66:	0635      	lsls	r5, r6, #24
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	d501      	bpl.n	8004e70 <_printf_i+0x1c4>
 8004e6c:	6019      	str	r1, [r3, #0]
 8004e6e:	e002      	b.n	8004e76 <_printf_i+0x1ca>
 8004e70:	0670      	lsls	r0, r6, #25
 8004e72:	d5fb      	bpl.n	8004e6c <_printf_i+0x1c0>
 8004e74:	8019      	strh	r1, [r3, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	4615      	mov	r5, r2
 8004e7c:	e7bc      	b.n	8004df8 <_printf_i+0x14c>
 8004e7e:	682b      	ldr	r3, [r5, #0]
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	602a      	str	r2, [r5, #0]
 8004e84:	681d      	ldr	r5, [r3, #0]
 8004e86:	6862      	ldr	r2, [r4, #4]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f7fb f9a8 	bl	80001e0 <memchr>
 8004e90:	b108      	cbz	r0, 8004e96 <_printf_i+0x1ea>
 8004e92:	1b40      	subs	r0, r0, r5
 8004e94:	6060      	str	r0, [r4, #4]
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	6123      	str	r3, [r4, #16]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea0:	e7aa      	b.n	8004df8 <_printf_i+0x14c>
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	462a      	mov	r2, r5
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	47d0      	blx	sl
 8004eac:	3001      	adds	r0, #1
 8004eae:	d0ad      	beq.n	8004e0c <_printf_i+0x160>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	079b      	lsls	r3, r3, #30
 8004eb4:	d413      	bmi.n	8004ede <_printf_i+0x232>
 8004eb6:	68e0      	ldr	r0, [r4, #12]
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	4298      	cmp	r0, r3
 8004ebc:	bfb8      	it	lt
 8004ebe:	4618      	movlt	r0, r3
 8004ec0:	e7a6      	b.n	8004e10 <_printf_i+0x164>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	4640      	mov	r0, r8
 8004eca:	47d0      	blx	sl
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d09d      	beq.n	8004e0c <_printf_i+0x160>
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	68e3      	ldr	r3, [r4, #12]
 8004ed4:	9903      	ldr	r1, [sp, #12]
 8004ed6:	1a5b      	subs	r3, r3, r1
 8004ed8:	42ab      	cmp	r3, r5
 8004eda:	dcf2      	bgt.n	8004ec2 <_printf_i+0x216>
 8004edc:	e7eb      	b.n	8004eb6 <_printf_i+0x20a>
 8004ede:	2500      	movs	r5, #0
 8004ee0:	f104 0619 	add.w	r6, r4, #25
 8004ee4:	e7f5      	b.n	8004ed2 <_printf_i+0x226>
 8004ee6:	bf00      	nop
 8004ee8:	08005055 	.word	0x08005055
 8004eec:	08005066 	.word	0x08005066

08004ef0 <memmove>:
 8004ef0:	4288      	cmp	r0, r1
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	eb01 0402 	add.w	r4, r1, r2
 8004ef8:	d902      	bls.n	8004f00 <memmove+0x10>
 8004efa:	4284      	cmp	r4, r0
 8004efc:	4623      	mov	r3, r4
 8004efe:	d807      	bhi.n	8004f10 <memmove+0x20>
 8004f00:	1e43      	subs	r3, r0, #1
 8004f02:	42a1      	cmp	r1, r4
 8004f04:	d008      	beq.n	8004f18 <memmove+0x28>
 8004f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f0e:	e7f8      	b.n	8004f02 <memmove+0x12>
 8004f10:	4402      	add	r2, r0
 8004f12:	4601      	mov	r1, r0
 8004f14:	428a      	cmp	r2, r1
 8004f16:	d100      	bne.n	8004f1a <memmove+0x2a>
 8004f18:	bd10      	pop	{r4, pc}
 8004f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f22:	e7f7      	b.n	8004f14 <memmove+0x24>

08004f24 <_sbrk_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4d06      	ldr	r5, [pc, #24]	; (8004f40 <_sbrk_r+0x1c>)
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	602b      	str	r3, [r5, #0]
 8004f30:	f7fc f8f0 	bl	8001114 <_sbrk>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	d102      	bne.n	8004f3e <_sbrk_r+0x1a>
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	b103      	cbz	r3, 8004f3e <_sbrk_r+0x1a>
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	2000029c 	.word	0x2000029c

08004f44 <memcpy>:
 8004f44:	440a      	add	r2, r1
 8004f46:	4291      	cmp	r1, r2
 8004f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f4c:	d100      	bne.n	8004f50 <memcpy+0xc>
 8004f4e:	4770      	bx	lr
 8004f50:	b510      	push	{r4, lr}
 8004f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f5a:	4291      	cmp	r1, r2
 8004f5c:	d1f9      	bne.n	8004f52 <memcpy+0xe>
 8004f5e:	bd10      	pop	{r4, pc}

08004f60 <_realloc_r>:
 8004f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f64:	4680      	mov	r8, r0
 8004f66:	4614      	mov	r4, r2
 8004f68:	460e      	mov	r6, r1
 8004f6a:	b921      	cbnz	r1, 8004f76 <_realloc_r+0x16>
 8004f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f70:	4611      	mov	r1, r2
 8004f72:	f7ff bc49 	b.w	8004808 <_malloc_r>
 8004f76:	b92a      	cbnz	r2, 8004f84 <_realloc_r+0x24>
 8004f78:	f7ff fbda 	bl	8004730 <_free_r>
 8004f7c:	4625      	mov	r5, r4
 8004f7e:	4628      	mov	r0, r5
 8004f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f84:	f000 f81b 	bl	8004fbe <_malloc_usable_size_r>
 8004f88:	4284      	cmp	r4, r0
 8004f8a:	4607      	mov	r7, r0
 8004f8c:	d802      	bhi.n	8004f94 <_realloc_r+0x34>
 8004f8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f92:	d812      	bhi.n	8004fba <_realloc_r+0x5a>
 8004f94:	4621      	mov	r1, r4
 8004f96:	4640      	mov	r0, r8
 8004f98:	f7ff fc36 	bl	8004808 <_malloc_r>
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d0ed      	beq.n	8004f7e <_realloc_r+0x1e>
 8004fa2:	42bc      	cmp	r4, r7
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	bf28      	it	cs
 8004faa:	463a      	movcs	r2, r7
 8004fac:	f7ff ffca 	bl	8004f44 <memcpy>
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	f7ff fbbc 	bl	8004730 <_free_r>
 8004fb8:	e7e1      	b.n	8004f7e <_realloc_r+0x1e>
 8004fba:	4635      	mov	r5, r6
 8004fbc:	e7df      	b.n	8004f7e <_realloc_r+0x1e>

08004fbe <_malloc_usable_size_r>:
 8004fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc2:	1f18      	subs	r0, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bfbc      	itt	lt
 8004fc8:	580b      	ldrlt	r3, [r1, r0]
 8004fca:	18c0      	addlt	r0, r0, r3
 8004fcc:	4770      	bx	lr
	...

08004fd0 <_init>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr

08004fdc <_fini>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr
